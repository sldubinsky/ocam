#Область ПрограммныйИнтерфейс

// Возвращает заголовок приложения, в который добавлен признак рабочей базы
//
// Возвращаемое значение:
//   Строка   - постфикс с указанием данных о базе
//
Функция ПолучитьЗаголовокСистемы() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	СтрокаЗаголовка = "";
	
	Если ЭтоРабочаяБаза() Тогда
		СтрокаЗаголовка = СтрокаЗаголовка + " (РАБОЧАЯ)";
	Иначе
		
		СтрПодключения = ВРег(СокрЛП(СтрокаСоединенияИнформационнойБазы()));
		
		ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрПодключения);
		Если ПараметрыСоединения.Свойство("File") Тогда
			СтрокаЗаголовка = СтрокаЗаголовка + " (Файловая " +  ПараметрыСоединения.File + ")" ;
		Иначе
			СтрокаЗаголовка = СтрокаЗаголовка + " (" + ПараметрыСоединения.Ref + ")";
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат СтрокаЗаголовка;

КонецФункции // ПолучитьЗаголовокСистемы()

// Функция возвращает ИСТИНА, если текущая база является рабочей.
// Если ЛОЖЬ, то это копия рабочей базы.
//
// Возвращаемое значение:
//   Булево - признак рабочей базы
//
Функция ЭтоРабочаяБаза() Экспорт
	
	Возврат ОбщегоНазначенияКВАПовтИсп.ЭтоРабочаяБаза();

КонецФункции // ЭтоРабочаяБаза()

// Функция возвращает ИСТИНА, если текущая база является предрелизной копией.
//
// Возвращаемое значение:
//   Булево - признак предрелизной (staging) базы
//
Функция ЭтоПредрелизнаяБаза() Экспорт
	
	Возврат ОбщегоНазначенияКВАПовтИсп.ЭтоПредрелизнаяБаза();

КонецФункции // ЭтоПредрелизнаяБаза()

// Функция возвращает ИСТИНА, если текущая база является эталонной базой.
//
// Возвращаемое значение:
//   Булево - признак эталонной (etalon) базы
//
Функция ЭтоЭталоннаяБаза() Экспорт
	
	Возврат ОбщегоНазначенияКВАПовтИсп.ЭтоЭталоннаяБаза();

КонецФункции // ЭтоЭталоннаяБаза()

// Функция возвращает ИСТИНА, если текущая база является тестовой копией.
//
// Возвращаемое значение:
//   Булево - признак тестовой (prestaging or test) базы
//
Функция ЭтоТестоваяБаза() Экспорт
	
	Возврат ОбщегоНазначенияКВАПовтИсп.ЭтоТестоваяБаза();

КонецФункции // ЭтоТестоваяБаза()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт

	// BSLLS:UnusedLocalVariable-off
	Если ИменаПараметровСеанса = Неопределено Тогда
		Если НЕ ЭтоРабочаяБаза() Тогда
			Если ЭтоПредрелизнаяБаза() Тогда
				ГлавныйСтиль = БиблиотекаСтилей["staging"];
			ИначеЕсли ЭтоЭталоннаяБаза() Тогда
				ГлавныйСтиль = БиблиотекаСтилей["etalon"];
			ИначеЕсли ЭтоТестоваяБаза() Тогда
				ГлавныйСтиль = БиблиотекаСтилей["prestaging"];
			Иначе
				ГлавныйСтиль = БиблиотекаСтилей["test"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// BSLLS:UnusedLocalVariable-on
	
	Если НЕ ЭтоРабочаяБаза() Тогда
		ОтключитьОтСервисаРегистрацииОшибок();
	КонецЕсли;
	
	УстановитьДополнительнуюИнформациюОбработкиОшибок();
	
КонецПроцедуры

// Калька с процедуры ЦентрМониторингаСлужебный.УстановитьДополнительнуюИнформациюОбработкиОшибок
// Добавляет в доп.информацию отчета об ошибке строку соединения с базой для идентификации
// на сервисе регистрации ошибок
//
Процедура УстановитьДополнительнуюИнформациюОбработкиОшибок() Экспорт
	
	Попытка
		Если БезопасныйРежим() = Истина Тогда
			УстановитьОтключениеБезопасногоРежима(Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Истина);
		ОбщиеНастройки = ОбработкаОшибок.ПолучитьОбщиеНастройки();
		УстановитьПривилегированныйРежим(Ложь);
		ДополнительнаяИнформация = Новый Структура;
		Если ЗначениеЗаполнено(ОбщиеНастройки.ДополнительнаяИнформацияОтчета) Тогда
			// Считаем, что внутри json. Если нет, то кто-то установил руками. Тогда ничего не меняем - так и должно быть.
			ДополнительнаяИнформация = ОбщегоНазначения.JSONВЗначение(ОбщиеНастройки.ДополнительнаяИнформацияОтчета, , Ложь);
		КонецЕсли;
		ТекущаяСтрокаСоединения = ВРег(СтрокаСоединенияИнформационнойБазы());
		Если ДополнительнаяИнформация.Свойство("connectString") 
			И ВРЕГ(ДополнительнаяИнформация.connectString) = ТекущаяСтрокаСоединения Тогда
			Возврат;
		КонецЕсли;
		ДополнительнаяИнформация.Вставить("connectString", ТекущаяСтрокаСоединения);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписатьJSON(ЗаписьJSON, ДополнительнаяИнформация);
		ОбщиеНастройки.ДополнительнаяИнформацияОтчета = ЗаписьJSON.Закрыть();
		УстановитьПривилегированныйРежим(Истина);
		ОбработкаОшибок.УстановитьОбщиеНастройки(ОбщиеНастройки);
		УстановитьПривилегированныйРежим(Ложь);
	// BSLLS:MissingCodeTryCatchEx-off
	Исключение
		// не используется сервис регистрации ошибок 
	КонецПопытки;
	// BSLLS:MissingCodeTryCatchEx-on
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтключитьОтСервисаРегистрацииОшибок()
	
	Попытка
		ПараметрыСервисаРегистрацииОшибок = ОбработкаОшибок.ПолучитьОбщиеНастройки();
		Если ПараметрыСервисаРегистрацииОшибок.АдресСервисаРегистрацииОшибок <> "" Тогда
			ПараметрыСервисаРегистрацииОшибок.АдресСервисаРегистрацииОшибок = "";
			ОбработкаОшибок.УстановитьОбщиеНастройки(ПараметрыСервисаРегистрацииОшибок);
		КонецЕсли;
	// BSLLS:MissingCodeTryCatchEx-off
	Исключение
		// не используется сервис регистрации ошибок 
	КонецПопытки;
	// BSLLS:MissingCodeTryCatchEx-on
	
КонецПроцедуры

#КонецОбласти