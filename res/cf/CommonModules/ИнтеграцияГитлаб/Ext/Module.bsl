#Область ПрограммныйИнтерфейс

// Получает теги проекта, доступные для обновления информационной базы
//
// Параметры:
//  НомерПроекта  - Строка - Код проекта на гитлаб
//
// Возвращаемое значение:
//   Структура   - ответ апи гитлаб в виде структуры
//
Функция ПолучитьТегиПроекта(НомерПроекта) Экспорт

	ФункцияДанныеЗаявки = СтрШаблон("/api/v4/projects/%1/repository/tags", НомерПроекта);
	
	Возврат ВызватьФункциюГитлаб(ФункцияДанныеЗаявки, "GET");

КонецФункции // ПолучитьТегиПроекта()

// Получает ветки проекта
//
// Параметры:
//  НомерПроекта  - Строка - Код проекта на гитлаб
//
// Возвращаемое значение:
//   Структура   - ответ апи гитлаб в виде структуры
//
Функция ПолучитьВеткиПроекта(НомерПроекта) Экспорт

	ФункцияДанныеЗаявки = СтрШаблон("/api/v4/projects/%1/repository/branches", НомерПроекта);
	
	Возврат ВызватьФункциюГитлаб(ФункцияДанныеЗаявки, "GET");

КонецФункции // ПолучитьВеткиПроекта()

Функция ЗапуститьПайплайн(НомерПроекта, Ветка, Параметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Параметры) Тогда
		ВызватьИсключение "Параметры должны быть заполнены";
	КонецЕсли;
	
	ФункцияСтартПайплайн = СтрШаблон("/api/v4/projects/%1/pipeline?ref=%2", НомерПроекта, Ветка);
	Для Каждого Параметр Из Параметры Цикл
		ПараметрСтрокой = СтрШаблон("&variables[][key]=%1&variables[][value]=%2", Параметр.Ключ, Параметр.Значение);
		ФункцияСтартПайплайн = ФункцияСтартПайплайн + ПараметрСтрокой;
	КонецЦикла;
	
	Возврат ВызватьФункциюГитлаб(ФункцияСтартПайплайн, "POST");

КонецФункции // ЗапуститьПайплайн()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВызватьФункциюГитлаб(ТекстФункции, Метод, ТелоЗапроса = "")
	
	ПолныйТекстЛога = СтрШаблон("Обращение к api '%1'; метод '%2'", ТекстФункции, Метод);
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		ПолныйТекстЛога = ПолныйТекстЛога + СтрШаблон("; тело запроса '%1'", ТелоЗапроса);
	КонецЕсли;
	ЗаписьЖурналаРегистрации(
		"Гитлаб.Запрос",
		УровеньЖурналаРегистрации.Информация, ,
		Метод + ":" + ТекстФункции,
		ПолныйТекстЛога);
	Соединение = ПолучитьСоединение();
	Заголовки = ПолучитьЗаголовки();
	Запрос = Новый HTTPЗапрос(ТекстФункции, Заголовки);
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	Результат = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	
	Попытка
		Ответ = ПолучитьПроверитьОтвет(Результат);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Гитлаб.Ответ", УровеньЖурналаРегистрации.Ошибка, , Инфо.Описание, ПолныйТекстЛога);
		ТекстДляПользователя = "Ошибка при обращении к Gitlab, обратитесь к администратору!" + Символы.ПС 
							 + Метод + ":" + ТекстФункции + Символы.ПС
							 + "Ответ: " + Инфо.Описание;
		ВызватьИсключение ТекстДляПользователя;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьПроверитьОтвет(Результат)
	РезультатСтрока = Результат.ПолучитьТелоКакСтроку();
	Если НЕ РезультатОК(Результат) Тогда
		ВызватьИсключение РезультатСтрока;
	КонецЕсли;
	Возврат ОбщегоНазначенияИнтеграцияКВА.ПолучитьСтруктуруИзТекстаJSON(РезультатСтрока);
КонецФункции

Функция РезультатОК(Результат)
	СтатусОК = (Результат.КодСостояния = 200)
				ИЛИ (Результат.КодСостояния = 201);
	Возврат СтатусОК;
КонецФункции

Функция ПолучитьСоединение()

	ПараметрыГитлаб = ИнтеграцияГитлабПовтИсп.ПолучитьПараметрыГитлаб();
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	Результат = Новый HTTPСоединение(
						ПараметрыГитлаб.АдресСервера,
						ПараметрыГитлаб.ПортСервера, , , , 
						120, 
						ЗащищенноеСоединение);
	Возврат Результат;

КонецФункции

Функция ПолучитьЗаголовки()

	ПараметрыГитлаб = ИнтеграцияГитлабПовтИсп.ПолучитьПараметрыГитлаб();
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить(
		"PRIVATE-TOKEN",
		ПараметрыГитлаб.Токен);
	Возврат Заголовки;

КонецФункции

#КонецОбласти