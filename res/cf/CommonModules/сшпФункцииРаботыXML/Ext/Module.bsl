
#Область ПрограммныйИнтерфейс

// Функция - Получить объект потокового чтения
//
// Параметры:
//	ЧитаемаяСтрока - данные, которые необходимо последовательно прочитать.
// 
// Возвращаемое значение:
//	ЧтениеXML - объект чтения XML данных.
//
Функция ПолучитьОбъектПотоковогоЧтения(ЧитаемаяСтрока) Экспорт
	
	текЧтение = Новый ЧтениеXML;
	текЧтение.УстановитьСтроку(ЧитаемаяСтрока);
	
	Возврат текЧтение;
	
КонецФункции

// Функция - Получить объект потоковой записи
//
// Параметры:
//	Кодировка - кодировка, в которой необходимо произвести запись данных.
//
// Возвращаемое значение:
//	ЗаписьXML - объект записи XML данных.
//
Функция ПолучитьОбъектПотоковойЗаписи(Кодировка = "") Экспорт
	
	текЗапись = Новый ЗаписьXML;
	текЗапись.УстановитьСтроку(Кодировка);
	
	Возврат текЗапись;
	
КонецФункции	

// Функция - Прочитать объект из потока
//
// Параметры:
//	Поток - объект чтения XML, которых нужно прочитать.
//	ТипОбъекта - тип объекта для чтения.
// 
// Возвращаемое значение:
//	Результат чтения объекта.
//
Функция ПрочитатьОбъектИзПотока(Поток, ТипОбъекта) Экспорт
	
	Возврат ФабрикаXDTO.ПрочитатьXML(Поток, ТипОбъекта);
	
КонецФункции

// Функция - Записать объект поток
//
// Параметры:
//	Объект - объект, который необходимо записать.
//	Фабрика - XDTO-фабрика.
// 
// Возвращаемое значение:
//	Результат записи XDTO-объекта в объект записи XML.
//
Функция ЗаписатьОбъектВПоток(Объект, Фабрика = Неопределено) Экспорт
	
	xdtoФабрика = ?(Фабрика = Неопределено, ФабрикаXDTO, Фабрика);
	xmlЗапись = ПолучитьОбъектПотоковойЗаписи();
	xdtoФабрика.ЗаписатьXML(xmlЗапись, Объект);
	
	Возврат xmlЗапись.Закрыть();
	
КонецФункции

// Функция - Сериализовать объект
//
// Параметры:
//	Источник - объект, который необходимо сериализовать.
// 
// Возвращаемое значение:
//	Результат сериализации объекта.	
//
Функция СериализоватьОбъект(Источник) Экспорт
	
	текОбъектЗаписи = сшпФункцииРаботыXML.ПолучитьОбъектПотоковойЗаписи();
	СериализаторXDTO.ЗаписатьXML(текОбъектЗаписи, Источник, НазначениеТипаXML.Явное);
	
	Возврат текОбъектЗаписи.Закрыть();

КонецФункции	

// Функция - Десериализовать объект
//
// Параметры:
//	Источник - объект, который необходимо десериализовать.
// 
// Возвращаемое значение:
//	Результат десериализации объекта.	
//
Функция ДесериализоватьОбъект(Источник) Экспорт
	
	РезультатОбъект = Неопределено;
	
	ПотокЧтение = сшпФункцииРаботыXML.ПолучитьОбъектПотоковогоЧтения(Источник);
	РезультатОбъект = СериализаторXDTO.ПрочитатьXML(ПотокЧтение);
	ПотокЧтение.Закрыть();
	
	Возврат РезультатОбъект;
	
КонецФункции	

// Функция - Сформировать XML
//
// Параметры:
//	сткДанные - Структура - входящие данные для формирования.
//	ДобавитьОбъявление - Булево - признак необходимости добавления объявления в начало XML-документа.
// 
// Возвращаемое значение:
//	Запись XML.
//
Функция СформироватьXML(сткДанные, ДобавитьОбъявление = Ложь) Экспорт
	
	ТекВозврат = Неопределено;
	
	Если ЗначениеЗаполнено(СткДанные) и ТипЗнч(СткДанные) = Тип("Структура") Тогда
		
		ТекЗапись = Новый ЗаписьXML;
		ТекЗапись.УстановитьСтроку("UTF-8");
		
		Если ДобавитьОбъявление Тогда
			
			ТекЗапись.ЗаписатьОбъявлениеXML();
		
		КонецЕсли;
		
		СформироватьУзелXML(ТекЗапись, СткДанные, "classData", Истина);
		
		текВозврат = текЗапись.Закрыть();
	
	КонецЕсли;
	
	Возврат текВозврат;

КонецФункции

// Процедура - Сформировать элемент XML
//
// Параметры:
//	ЗаписьXML - ЗаписьXML - текущий объект записи XML.
//	Данные - Структура,Массив,Строка- данные для записи.
//	Имя - Строка - имя элемента.
//	ЭтоДанные - Булево - признак записи в элемент XML данных или текста.
//	ЗаписыватьПустоеЗначение - Булево - признак записи пустого значения.
// 
// Возвращаемое значение:
//	Запись XML.
//
Процедура СформироватьЭлементXML(ЗаписьXML, Данные, Имя, ЭтоДанные = Ложь, ЗаписыватьПустоеЗначение = Ложь) Экспорт
	
	ТипЗначения = ТипЗнч(Данные);
	
	Если ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Массив") Тогда
		
		НачалоРазделителя = СтрНайти(Имя, "___");
		Если НачалоРазделителя > 0 Тогда
			ИмяМассива = Лев(Имя, НачалоРазделителя - 1);
			ИмяСтрокиМассива = Прав(Имя, СтрДлина(Имя) - НачалоРазделителя - 2);
			СформироватьУзелXML(ЗаписьXML, Данные, ИмяМассива, , , ИмяСтрокиМассива);
		Иначе
			СформироватьУзелXML(ЗаписьXML, Данные, Имя);
		КонецЕсли;
	
	Иначе
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);
		
		Если ЗначениеЗаполнено(Данные) Или ЗаписыватьПустоеЗначение Тогда
			
			Если ЭтоДанные Тогда
				
				ЗаписьXML.ЗаписатьСекциюCDATA(Данные);
				
			Иначе
					
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(Данные));
				
			КонецЕсли;
			
		Иначе
			
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
			ЗаписьXML.ЗаписатьАтрибут("xsi:nil", "true");
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Сформировать элемент XML
//
// Параметры:
//	Запись - ЗаписьXML - текущий объект записи XML
//	Данные - Структура,Массив - данные для записи
//	Имя - Строка - имя узла
//	ДобавитьПространстваИмен - Булево - признак необходимости записи в узел информации о пространстве имён
//	Атрибуты - Структура - Структура атрибутов
// 
// Возвращаемое значение:
//	Запись XML.
//
Процедура СформироватьУзелXML(Запись, Данные, Имя, ДобавитьПространстваИмен = Ложь, Атрибуты = Неопределено, ИмяСтрокиМассива = "row") Экспорт
	
	Запись.ЗаписатьНачалоЭлемента(Имя);
	
	Если ДобавитьПространстваИмен Тогда
		
		Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	КонецЕсли;	
	
	Если ТипЗнч(Атрибуты) = Тип("Структура") Тогда
		
		Для Каждого Атрибут Из Атрибуты Цикл 
			
			Запись.ЗаписатьАтрибут(Атрибут.Ключ, XMLСтрока(Атрибут.Значение));
		
		КонецЦикла;;
	
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		Для Каждого текЭлемент Из Данные Цикл
			
			СформироватьЭлементXML(Запись, ТекЭлемент.Значение, ТекЭлемент.Ключ);
		
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		
		Для Каждого текЭлемент Из Данные Цикл
			
			ТипЗначения = ТипЗнч(текЭлемент);
			
			Если ТипЗначения = Тип("Структура") Тогда
				
				СформироватьУзелXML(Запись, ТекЭлемент, ИмяСтрокиМассива);
			
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Запись.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти
