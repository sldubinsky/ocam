
#Область ПрограммныйИнтерфейс

// Функция - Установить параметры адаптера
//
// Параметры:
//  Параметры - Структура - Структура параметров.
//
Функция УстановитьПараметрыАдаптера(Параметры) Экспорт
	
	ЗначенияКонстантИзменены = Ложь;
	
	Для Каждого текПараметр Из Параметры Цикл
		
		Если текПараметр.Ключ = "AdapterType" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпТипИспользуемогоКоннектораESB", Перечисления.сшпТипыКоннекторовESB[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "Uri" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпАдресАдаптераESB", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "ConfigurationName" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпИмяСервисаESB", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "EndpointName" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпИмяТочкиПодключенияESB", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "MessageFormat" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпФорматСообщений", Перечисления.сшпФорматыСообщений[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "ServerMode" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпРежимПередачиСообщений", Перечисления.сшпРежимыПередачиСообщений[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "MaxBatchSize" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпРазмерПакета", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "AutoStartProcessing" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпАвтоматическийСтартОбработчиков", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "WaitingTime" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпДлительностьОжидания", текПараметр.Значение);
			
		ИначеЕсли текПараметр.Ключ = "MaxFlowIn" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "MaxFlowOut" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "ShutDown" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпОтключитьПотокиОбработкиДанных", текПараметр.Значение);
		
		ИначеЕсли текПараметр.Ключ = "SerializationFormat" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпФорматДляСериализации", Перечисления.сшпФорматыСообщений[текПараметр.Значение]);
		
		ИначеЕсли текПараметр.Ключ = "WaitActualVersionSec" Тогда
			
			Если текПараметр.Значение <> сшпКэшируемыеФункции.ВремяОжиданияПриНеактуальномОбъектномКеше() Тогда
				РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВремяОжиданияПриНеактуальномОбъектномКеше", текПараметр.Значение);
				ОбновитьПовторноИспользуемыеЗначения(); 
			Иначе
				РезультатУстановки = Ложь;
			КонецЕсли;
			
		ИначеЕсли текПараметр.Ключ = "CheckCacheVersion" Тогда
			
			Если текПараметр.Значение <> сшпКэшируемыеФункции.ПроверятьАктуальностьОбъектногоКеша() Тогда
				РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпПроверятьАктуальностьОбъектногоКеша", текПараметр.Значение);
				ОбновитьПовторноИспользуемыеЗначения(); 
			Иначе
				РезультатУстановки = Ложь;
			КонецЕсли;
		
		ИначеЕсли текПараметр.Ключ = "LiveTime" Тогда
			
			ТекущаяТаблица = сшпРаботаСКонстантами.ПолучитьДлительностьХранения();
			ИмяКонстанты = "сшпДлительностьХраненияСообщенийПоОчередямИСостояниям";
			ТаблицаДлительностиОжидания = сшпРаботаСКонстантами.СформироватьЗначениеКонстантыДлительностьХранения();
			
			КоличествоСтрокВТаблице = СтрЧислоСтрок(текПараметр.Значение)-1;
			КоличествоСтрокВТекущейТаблице = ТекущаяТаблица.Количество();
			
			Если КоличествоСтрокВТаблице = 0 Тогда 
				
				Если Не КоличествоСтрокВТекущейТаблице = 0 Тогда 
					
					Константы[ИмяКонстанты].Установить(Новый ХранилищеЗначения(ТаблицаДлительностиОжидания));
					ЗначенияКонстантИзменены = Истина;
				
				КонецЕсли;
				
				Продолжить;
			
			КонецЕсли;
			
			ПроверятьНаличиеИзменений = КоличествоСтрокВТаблице = КоличествоСтрокВТекущейТаблице;
			СтрокаТекущейТаблицы = Неопределено;
			СтруктураКолонок = Новый Структура;
			ИзмененияНайдены = Не ПроверятьНаличиеИзменений;
			
			Для Счетчик = 1 По КоличествоСтрокВТаблице+1 Цикл
				
				ТекСтрока = СтрПолучитьСтроку(текПараметр.Значение, Счетчик);
				МассивПараметров = сшпРаботаСоСтроками._СтрРазделить(ТекСтрока, ";");
				
				Если Счетчик = 1 Тогда 
					
					Для Каждого ИмяКолонки Из ТаблицаДлительностиОжидания.Колонки Цикл 
						
						ИндексКолонки = МассивПараметров.Найти(ИмяКолонки.Имя);
						
						Если ИндексКолонки = Неопределено Тогда 
							
							ЗаписьЖурналаРегистрации("Datareon. Обработка системного сообщения", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.сшпРаботаСДанными,, "Сообщение CSA содержит не корректную структуру параметра LiveTime: в параметре не определено поле " + ИмяКолонки.Имя);
							Счетчик = СтрЧислоСтрок(текПараметр.Значение);
						
						Иначе
							
							СтруктураКолонок.Вставить(ИмяКолонки.Имя, ИндексКолонки);
						
						КонецЕсли;
					
					КонецЦикла;
				
				Иначе
					
					НоваяСтрокаТЗ = ТаблицаДлительностиОжидания.Добавить();
					
					Если ПроверятьНаличиеИзменений Тогда 
						
						СтрокаТекущейТаблицы = ТекущаяТаблица[Счетчик-2];
					
					КонецЕсли;
					
					Для Каждого ЭлементСтруктуры Из СтруктураКолонок Цикл 
						
						Если ЭлементСтруктуры.Ключ = "ТипОчереди" Тогда
							
							НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] = Перечисления.сшпТипыОчередей[МассивПараметров[ЭлементСтруктуры.Значение]];
						
						ИначеЕсли ЭлементСтруктуры.Ключ = "СтатусСообщения" Тогда 
							
							НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] = Перечисления.сшпСтатусыСообщений[МассивПараметров[ЭлементСтруктуры.Значение]];
						
						Иначе
							
							НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] = МассивПараметров[ЭлементСтруктуры.Значение];
						
						КонецЕсли;
						
						Если ПроверятьНаличиеИзменений И СтрокаТекущейТаблицы[ЭлементСтруктуры.Ключ] <> НоваяСтрокаТЗ[ЭлементСтруктуры.Ключ] Тогда 
							
							ИзмененияНайдены = Истина;
						
						КонецЕсли;
					
					КонецЦикла;
				
				КонецЕсли;
			
			КонецЦикла;
			
			ЗначениеКонстанты = Новый ХранилищеЗначения(ТаблицаДлительностиОжидания);
			Если ИзмененияНайдены Тогда
				
				Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
				РезультатУстановки = Истина;
			
			Иначе
				
				РезультатУстановки = Ложь;
			
			КонецЕсли; 
		
		ИначеЕсли текПараметр.Ключ = "LiveTimeDefault" Тогда
			
			РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпДлительностьХраненияСообщений", текПараметр.Значение);
		
		Иначе
			
			РезультатУстановки = Ложь;
		
		КонецЕсли;	
		
		ЗначенияКонстантИзменены = ЗначенияКонстантИзменены Или РезультатУстановки;
	
	КонецЦикла;
	
	РезультатУстановки = сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпИспользоватьСШП", Истина);
	ЗначенияКонстантИзменены = ЗначенияКонстантИзменены Или РезультатУстановки;
	
	Если ЗначенияКонстантИзменены Тогда 
		
		сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();	
	
	КонецЕсли;
	
	сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпДатаПолученияНастроек", ТекущаяДата());

	Возврат ЗначенияКонстантИзменены;
	
КонецФункции

// Процедура - Установить состояние сообщения
//
// Параметры:
//  ИдентификаторСобытия - УникальныйИдентификатор - индентификатор события.
//  НовоеСостояние - Перечисление.сшпСтатусыСообщений - новое состояние сообщения. 
//	Задержка - Число - Секунд задержки
//	ОписаниеОшибки - Строка - Описание ошибки
//	ИндексПотока - Число - индекс потока
//	ЗаписыватьСтатус - Булево - запись статуса в регистр состояние сообщений
//	Направление - Перечисление.сшпТипыИнтеграции - получение или отправка сообщений
//	ИдентификаторСообщения - УникальныйИдентификатор - Идентификатор сообщения
//	ДопСвойства - Структура - Дополнительные свойства, добавляемые в ACK
//
 Процедура УстановитьСостояниеСообщения(ИдентификаторСобытия, НовоеСостояние, Задержка = 0, ОписаниеОшибки = "", 
										ИндексПотока = 0, ЗаписыватьСтатус = Истина, Направление = Неопределено, 
										КлассИд = "", ИдентификаторСообщения = Неопределено, ДопСвойства = Неопределено) Экспорт
		
	ИдСообщения = Неопределено;
	ИдСобытия = ?(ТипЗнч(ИдентификаторСобытия) = Тип("Строка"), Новый УникальныйИдентификатор(ИдентификаторСобытия), ИдентификаторСобытия);

	ИдОтбор = ИдСобытия;

	Если Не ИдентификаторСообщения = Неопределено Тогда
		ИдСообщения = ?(ТипЗнч(ИдентификаторСообщения) = Тип("Строка"), Новый УникальныйИдентификатор(ИдентификаторСообщения), ИдентификаторСообщения);
		ИдОтбор = ИдСообщения;
	КонецЕсли;

	Если ЗаписыватьСтатус Тогда
				
		Набор = РегистрыСведений.сшпСостояниеСообщений.СоздатьНаборЗаписей();
		Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);		
		Набор.Очистить();
		
		// Фикс дублей отправки
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.сшпСостояниеСообщений");
		// КОНЕЦ Фикс дублей отправки	
		
			Если ИдентификаторСообщения = Неопределено ИЛИ ИдентификаторСобытия = ИдентификаторСообщения Тогда
				Набор.Отбор.ИдентификаторСобытия.Установить(ИдОтбор, Истина);
				Набор.Отбор.ИдентификаторСообщения.Установить(ИдОтбор, Истина);
				// Фикс дублей отправки
				ЭлементБлокировки.УстановитьЗначение("ИдентификаторСобытия", ИдОтбор);
				// КОНЕЦ Фикс дублей отправки
			Иначе
				Набор.Отбор.ИдентификаторСообщения.Установить(ИдОтбор, Истина);					
			КонецЕсли;
			
			// Фикс дублей отправки
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторСообщения", ИдОтбор);
			Блокировка.Заблокировать();
			// КОНЕЦ Фикс дублей отправки
			
			Набор.Прочитать();
			
			Если Набор.Количество() > 0 Тогда
				
				Для Каждого СтрокаНабора Из Набор Цикл
					
					// Фикс дублей отправки
					Если СтрокаНабора.СтатусСообщения = Перечисления.сшпСтатусыСообщений.ОтправкаПодтверждена
						И НовоеСостояние = Перечисления.сшпСтатусыСообщений.Отправлено Тогда
						ЗаписьЖурналаРегистрации("Datareon. Установка состояния", УровеньЖурналаРегистрации.Предупреждение,,, 
							"Текущее состояние сообщения уже равно 'Отправка подтверждена'. Изменение на новое состояние 'Отправлено' выполнятся не будет");
						Продолжить;
					КонецЕсли;
					// КОНЕЦ Фикс дублей отправки
					
					СтрокаНабора.ДатаИзменения = ТекущаяДатаСеанса();
					СтрокаНабора.СтатусСообщения = НовоеСостояние;
					СтрокаНабора.Задержка = Задержка;
					СтрокаНабора.ЗадержкаЧисло = сшпОбщегоНазначения.ПеревестиДатуВЧисло(СтрокаНабора.ДатаИзменения, СтрокаНабора.Задержка);
					СтрокаНабора.ОписаниеОшибки = ОписаниеОшибки;
					СтрокаНабора.ИндексПотока = ИндексПотока; 
					
				КонецЦикла;
				
				Набор.Записать(Истина);
				
			Иначе
			
				Набор.Очистить();
			
				ТекЗапись = Набор.Добавить();
				ТекЗапись.ДатаИзменения = ТекущаяДатаСеанса();
				ТекЗапись.ИдентификаторСообщения = ?(ИдентификаторСообщения = Неопределено, ИдСобытия, ИдСообщения);
				ТекЗапись.ИдентификаторСобытия = ИдСобытия;
				ТекЗапись.СтатусСообщения = НовоеСостояние;
				ТекЗапись.Задержка = Задержка;
				ТекЗапись.ЗадержкаЧисло = сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекЗапись.ДатаИзменения, ТекЗапись.Задержка);
				ТекЗапись.ОписаниеОшибки = ОписаниеОшибки;
				ТекЗапись.ИндексПотока = ИндексПотока;
				
				Набор.Записать(Истина);	
				
			КонецЕсли;
		
		// Фикс дублей отправки
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		// КОНЕЦ Фикс дублей отправки
		
	КонецЕсли;

	Попытка
	
		сшпСистемныеСообщения.ОтправитьСостояниеСообщения(Строка(ИдОтбор), НовоеСостояние, ОписаниеОшибки, Задержка, Направление, КлассИд, ДопСвойства);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Datareon. Отправка состояния сообщения", УровеньЖурналаРегистрации.Ошибка, , , КраткоеПредставлениеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;

КонецПроцедуры

// Процедура - Удалить сообщение
//
// Параметры:
//  ТипОчереди - Перечисление.сшпТипыОчередей - тип очереди, указывает очередь из которой необходимо удалить сообщение. 
//  Идентификатор - УникальныйИдентификатор - индентификатор сообщения.
//
Процедура УдалитьСообщение(ТипОчереди, Идентификатор) Экспорт
	
	Если ТипОчереди = Перечисления.сшпТипыОчередей.Исходящая Тогда
		
		ТекЗапись = РегистрыСведений.сшпОчередьИсходящихСообщений.СоздатьМенеджерЗаписи();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ТекЗапись.ИдентификаторСобытия = Идентификатор;
	ТекЗапись.Удалить();
	
	текЗапись = сшпКэшируемыеФункции.ПолучитьОбъектНабораЗаписейСостоянияСообщений();
	ТекЗапись.Отбор.ИдентификаторСобытия.Установить(Идентификатор);
	
	ТекЗапись.Прочитать();
	
	Если ТекЗапись.Выбран() Тогда
		ТекЗапись.Очистить();
		ТекЗапись.Записать();
	КонецЕсли;
	
КонецПроцедуры	

// Процедура - Поместить в очередь исходящих
//
// Параметры:
//  ТипОбъекта - Строка - Имя объекта по которому произошло событие
//  ОбъектСобщения - Строка, ДвоичныеДанные - сериализованное представление объекта на момент события
//  Формат - Перечисление.сшпФорматыСообщений - формат в котором выполняется сериализация сообщения 
//  Метод - Перечисление.сшпМетодХранения - метод сохранения объекта события
//	ПомещатьВХранилищеЗначения - Булево - помещение в хранилище значений
//	ЭтоУдаление - Булево - удаление  
//	СсылкаНаОбъект - ЛюбаяСсылка - Ссылка на объект помещаемый в очередь
//
Процедура ПоместитьВОчередьИсходящих(ТипОбъекта, ОбъектСобщения, Формат = Неопределено, Метод = Неопределено, ПомещатьВХранилищеЗначения = Истина, ЭтоУдаление = Ложь, СсылкаНаОбъект = Неопределено) Экспорт
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор();
	УстановитьСостояниеСообщения(ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений.Новое, , , , , Перечисления.сшпТипыИнтеграции.Исходящая);
	
	Набор = РегистрыСведений.сшпОчередьИсходящихСообщений.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСобытия.Установить(ИдентификаторСообщения, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ИдентификаторСобытия = ИдентификаторСообщения;
	
	Если ПомещатьВХранилищеЗначения Тогда
		 
		ТекЗапись.Хранилище = Новый ХранилищеЗначения(ОбъектСобщения);
		
	Иначе
		
		ТекЗапись.Хранилище = ОбъектСобщения;
		
	КонецЕсли;
	
	ТекЗапись.МетодХранения = ?(Метод = Неопределено, Перечисления.сшпМетодХранения.Сериализация, Метод);
	ТекЗапись.ДатаРегистрации = ТекущаяДатаСеанса();
	ТекЗапись.ОбъектСобытия = ТипОбъекта;
	ТекЗапись.ФорматСообщения = ?(Формат = Неопределено, сшпФункциональныеОпции.ФорматСериализации(), Формат);
	ТекЗапись.ЭтоУдаление = ЭтоУдаление;
	ТекЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
	
	Если ЭтоУдаление Тогда
		 
		Набор.ДополнительныеСвойства.Вставить("ЭтоУдаление");
		
	КонецЕсли;
	
 	Набор.Записать(Истина);
	
КонецПроцедуры

// Процедура - Обработать запись очереди
//
// Параметры:
//  Ключ - КлючЗаписиРегистраСведений - Ключ записи для которой выполняется изменение статуса 
//  НовыйСтатус - Строка - Название нового статуса сообщения.
//
Процедура ОбработатьЗаписьОчереди(Ключ, НовыйСтатус) Экспорт
	
	УстановитьСостояниеСообщения(Ключ.ИдентификаторСообщения, Перечисления.сшпСтатусыСообщений[НовыйСтатус], , , , , Перечисления.сшпТипыИнтеграции.Исходящая);

КонецПроцедуры	

// Процедура - Установить статус обработчика
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - индентификатор обработчика
//  Статус - Перечисление.сшпСтатусыОбработчиков - новый статус обработчика. 
//
Процедура УстановитьСтатусОбработчика(Идентификатор, Статус) Экспорт
	
	ИдентификаторОбработчика = ?(ТипЗнч(Идентификатор) = Тип("Строка"), Новый УникальныйИдентификатор(Идентификатор), Идентификатор);
	
	Набор = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторОбработчика.Установить(ИдентификаторОбработчика, Истина);
	Набор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
	
	ТекЗапись = Набор.Добавить();
	ТекЗапись.ДатаИзменения = ТекущаяДатаСеанса();
	ТекЗапись.ИдентификаторОбработчика = ИдентификаторОбработчика;
	ТекЗапись.Статус = Статус;
	
	Набор.Записать(Истина);
	
	сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

// Объектный кеш актуален.
// 
// Параметры:
//  ТипОбъекта - Строка - Тип объекта
//  СсылкаНаОбъект  - ЛюбаяСсылка - Ссылка на объект
// 
// Возвращаемое значение:
//  Булево - Объектный кеш актуален
Функция ОбъектныйКешАктуален(СсылкаНаОбъект, ТипОбъекта) Экспорт

	Если сшпКэшируемыеФункции.ИспользуетсяОбъектныйКеш(ТипОбъекта) И сшпКэшируемыеФункции.ОбъектМетаданныхСуществует(ТипОбъекта) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МойОбъект.ВерсияДанных КАК ВерсияДанных
			|ИЗ
			|	"+ТипОбъекта+" КАК МойОбъект
			|ГДЕ
			|	МойОбъект.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			Если СсылкаНаОбъект.ВерсияДанных <> ВыборкаДетальныеЗаписи.ВерсияДанных Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область РаботаБезОчередей

Процедура ОбработатьВходящееСообщениеБезОчереди(Формат, xdtoПакет) Экспорт
	
	Если Не сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазы() Тогда
		
		ЗаписьЖурналаРегистрации("Datareon. Управление пулом обработчиков", УровеньЖурналаРегистрации.Ошибка,,, "Рассинхронизация идентификаторов информационной базы");
		
		Возврат;
		
	КонецЕсли;

	ФорматОберткиСообщения = сшпКэшируемыеФункции.ФорматСообщенийПоУмолчанию();

	xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматОберткиСообщения, xdtoПакет);

	ВремяОжидания = ?(сшпФункциональныеОпции.АвтоматическийСтартОбработчиков(), сшпКэшируемыеФункции.ДлительностьОжиданияПриАвтоматическомСтарте(), сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпДлительностьОжидания")) * 1000;
	
	Идентификатор = ?(ТипЗнч(xdtoПакет.Id) = Тип("Строка"), Новый УникальныйИдентификатор(xdtoПакет.Id), xdtoПакет.Id);	
	ФорматСообщения = Формат;	
	КлассСообщения = ?(ТипЗнч(xdtoПакет.ClassId) = Тип("Строка"), xdtoПакет.ClassId, "");	
	ДатаРегистрации = ТекущаяДатаСеанса();
	
	ОстатокВремениОжидания = ВремяОжидания;	
	Пока ОстатокВремениОжидания > 0 Цикл
		
		СтартОжидания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если Не ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Или ПолучитьФункциональнуюОпцию("сшпОтключитьПотоки") Тогда
			
			Прервать;
			
		ИначеЕсли сшпОбслуживаниеОчередей.ИдетОбработкаСистемныхСобытий() Тогда //Если включена обработка системных событий приостанавливаем рабочие потоки
			
			сшпОбщегоНазначения.Ожидание(1);
			ОстатокВремениОжидания = ОстатокВремениОжидания - (ТекущаяУниверсальнаяДатаВМиллисекундах() - СтартОжидания);
			Продолжить;
			
		КонецЕсли;

		СткОбработчик = сшпКэшируемыеФункции.ПолучитьОбработчик(КлассСообщения, Перечисления.сшпТипыИнтеграции.Входящая, сшпФункциональныеОпции.ВерсияОбработчиков());
		
		Если Не ЗначениеЗаполнено(СткОбработчик.ПроцедураОбработки) Тогда
			
			сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОтсутствуетОбработчик, , "В 1С отсутствует входящий обработчик для класса " + Строка(КлассСообщения), , Ложь, Перечисления.сшпТипыИнтеграции.Входящая, КлассСообщения);
			Прервать;
			
		Иначе

			Если СткОбработчик.Статус = Перечисления.сшпСтатусыОбработчиков.Отключен Тогда
			
				сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОбработкаОтменена, , "Обработчик для класса " + Строка(КлассСообщения) + " найден, но отключен.", , Ложь, Перечисления.сшпТипыИнтеграции.Входящая, КлассСообщения);
				Прервать;
		
			Иначе
			
				Попытка
					
					Задержка = 0;
					текЗаголовокЖурнала = "Datareon. Получение объекта события";
					ТекстОшибки = "";
					
					ОбъектСобытия = сшпОбщегоНазначения.ЗаписатьОбъектВПоток(ФорматОберткиСообщения, xdtoПакет);
					
					ИдШаблона = СткОбработчик.ИдентификаторШаблона;
					ВерсияШаблона = СткОбработчик.Версия;
					
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано; // Переменная для установки нового состояние сообщения
					ОбъектСообщение = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматОберткиСообщения, ОбъектСобытия);
							
					КоличествоПопытокОжидания = сшпОбщегоНазначения.ПолучитьКоличествоПопытокОжидания(ОбъектСообщение);
										
					сшпОбщегоНазначения.ВыполнитьКодВходящегоОбработчика(сткОбработчик.ПроцедураОбработки, Идентификатор,
						КлассСообщения, ОбъектСобытия, СткОбработчик, ФорматСообщения, Задержка, ТекстОшибки, ДатаРегистрации,
						КоличествоПопытокОжидания, ОбъектСообщение, СостояниеСообщения);
					
					Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки И Не ЗначениеЗаполнено(Задержка) тогда
			
						Задержка = 30;
				
						ТекстПредупреждения = "Задержка в ожидании обработки не может быть равна 0 с. Установлена задержка 30 с.";
				
						ЗаписьЖурналаРегистрации("Datareon. Обработка сообщения", УровеньЖурналаРегистрации.Предупреждение, ,
							Идентификатор, ТекстПредупреждения);
							
					КонецЕсли;	
									
					сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, СостояниеСообщения, Задержка, ТекстОшибки, , Ложь, Перечисления.сшпТипыИнтеграции.Входящая, КлассСообщения);
					
					Прервать;
					
				Исключение
					
					ТекстОшибки = сшпОбщегоНазначения.ДополнитьТекстОшибки(сшпОбщегоНазначения.ПолучитьТекстОшибкиОбработчика(ИнформацияОбОшибке()), СткОбработчик, Неопределено);				
					ЗаписьЖурналаРегистрации("Datareon. Обработка сообщения", УровеньЖурналаРегистрации.Ошибка, , Идентификатор, ТекстОшибки);
					
					СткСвойства = Новый Структура;
					СткСвойства.Вставить("TemplateId", Строка(ИдШаблона));
					СткСвойства.Вставить("TemplateVersion", ВерсияШаблона);
					СткСвойства.Вставить("MessageId", Строка(Идентификатор));
					СткСвойства.Вставить("TemplateName", СткОбработчик.Наименование);  
					
					сшпСистемныеСообщения.ОтправитьСообщениеОбОшибке("Handler", ТекстОшибки, СткСвойства);
					
					сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОшибкаОбработки, , ТекстОшибки, , Ложь, Перечисления.сшпТипыИнтеграции.Входящая, КлассСообщения);				
					Прервать;
					
				КонецПопытки;		
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВходящееСлужебноеСообщениеБезОчереди(Идентификатор, Сообщение, КлассСообщения, Формат) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		Если КлассСообщения = "TUM" ИЛИ 
			КлассСообщения = "TRM" ИЛИ
			КлассСообщения = "TCS" ИЛИ
			КлассСообщения = "FUM" ИЛИ
			КлассСообщения = "FCS" ИЛИ
			КлассСообщения = "FRM" Тогда
			
			Попытка
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ИдентификаторСобытия", Идентификатор);
				СтруктураПараметров.Вставить("Хранилище", Новый ХранилищеЗначения(Сообщение));
				СтруктураПараметров.Вставить("КлассСообщения", КлассСообщения);
				СтруктураПараметров.Вставить("ФорматСообщения", Формат);
				
				МсвПараметры = Новый Массив;
				МсвПараметры.Добавить(СтруктураПараметров);
				ЗаданиеОбновления = ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.ВыполнитьИзменениеОбработчиков", МсвПараметры, "ВыполнитьИзменениеОбработчиков", "ВыполнитьИзменениеОбработчиков");
				ЗаданиеОбновления.ОжидатьЗавершенияВыполнения(20);
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации("Datareon. Обработка очереди системных сообщений", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));			 
				
			КонецПопытки;		
			
		ИначеЕсли КлассСообщения = "TLR" Тогда
			
			сшпСистемныеСообщения.ПолучитьСписокВерсийОбработчиковСобытий();
			
		ИначеЕсли КлассСообщения = "TSR" Тогда
			
			сшпСистемныеСообщения.ПолучитьСписокОбработчиковСобытий(Формат, Сообщение);
			
		ИначеЕсли КлассСообщения = "FLR" Тогда
			
			сшпСистемныеСообщения.ПолучитьСписокВерсийФункций();
			
		ИначеЕсли КлассСообщения = "FSR" Тогда
			
			сшпСистемныеСообщения.ПолучитьСписокФункций(Формат, Сообщение);
			
		ИначеЕсли КлассСообщения = "RML" Тогда
			
			сшпСистемныеСообщения.ВозвратПакетовВОбработку(Формат, Сообщение);
			
		ИначеЕсли КлассСообщения = "BMR" Тогда
			
			ФоновыеЗадания.Выполнить("сшпСистемныеСообщения.ПолучитьСтруктуруКонфигурации", , Идентификатор, "ПолучитьСтруктуруКонфигурации");
			
		ИначеЕсли КлассСообщения = "V1C" Тогда
			
			сшпСистемныеСообщения.ПолучитьВерсиюПодсистемы1С();
			
		ИначеЕсли КлассСообщения = "CSB" Тогда
			
			сшпСистемныеСообщения.ПолучитьПараметрыПодключения();
			
		ИначеЕсли КлассСообщения = "FND" Тогда
			
			МсвПараметры = Новый Массив;
			МсвПараметры.Добавить(Формат);
			МсвПараметры.Добавить(Сообщение);
			МсвПараметры.Добавить(Идентификатор);
			
			ФоновыеЗадания.Выполнить("сшпСистемныеСообщения.НайтиСообщения", МсвПараметры, Идентификатор, "НайтиСообщения");
						
		ИначеЕсли КлассСообщения = "DEB" Тогда
			
			МсвПараметры = Новый Массив;
			МсвПараметры.Добавить(ПолучитьФункциональнуюОпцию("сшпФорматСообщения"));
			МсвПараметры.Добавить(Сообщение);
			МсвПараметры.Добавить(Идентификатор);
			
			ФоновыеЗадания.Выполнить("сшпОтладкаОбработчиков.ВыполнитьОтладкуОбработчика", МсвПараметры, Идентификатор, "ВыполнитьОтладкуОбработчика");
			
		ИначеЕсли КлассСообщения = "ACK" Тогда
			
			МсвПараметры = Новый Массив;
			МсвПараметры.Добавить(Формат);
			МсвПараметры.Добавить(Сообщение);
			
			ФоновыеЗадания.Выполнить("сшпСистемныеСообщения.ПодтвердитьОтправкуСообщения", МсвПараметры, Идентификатор, "ВыполнитьПодтверждениеСообщения");
			
		Иначе
			
			ИнформацияОбОшибке = "Получен неизвестный класс служебного сообщения " + КлассСообщения;	
			ЗаписьЖурналаРегистрации("Datareon. Обработка очереди системных сообщений", УровеньЖурналаРегистрации.Предупреждение, , Идентификатор, ИнформацияОбОшибке);
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Datareon. Обработка очереди системных сообщений", УровеньЖурналаРегистрации.Ошибка, , Идентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФункциями

Функция ВыполнитьФункцию(ИмяФункции, dt_Параметр1 = Неопределено, dt_Параметр2 = Неопределено,
	dt_Параметр3 = Неопределено, dt_Параметр4 = Неопределено, dt_Параметр5 = Неопределено, dt_Параметр6 = Неопределено,
	dt_Параметр7 = Неопределено, dt_Параметр8 = Неопределено, dt_Параметр9 = Неопределено, dt_Параметр10 = Неопределено)

	Возврат сшпОбщегоНазначения.ВыполнитьФункцию(ИмяФункции, dt_Параметр1, dt_Параметр2, dt_Параметр3, dt_Параметр4,
		dt_Параметр5, dt_Параметр6, dt_Параметр7, dt_Параметр8, dt_Параметр9, dt_Параметр10);

КонецФункции

#КонецОбласти

