
#Область ПрограммныйИнтерфейс

// Функция - Обновить обработчик события
//
// Параметры:
//  ФорматСообщения - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
// Булево  - Признак успешности обновления обработчика события.
//
Функция ОбновитьОбработчикСобытия(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	ИдентификаторШаблона = "";
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
		ИдентификаторШаблона = сткПараметры.Id;
		классОбъекта = сткПараметры.ObjectClass;
		
		Если ТипЗнч(классОбъекта) = Тип("Строка") Тогда
			
			ТипИнтеграции = ?(сткПараметры.Integration = "Ingoing", Перечисления.сшпТипыИнтеграции.Входящая, Перечисления.сшпТипыИнтеграции.Исходящая); 
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
			//если именился класс или тип интеграции обработчика, то удалим старый обработчик
			ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
			                            |	тбРепозиторий.ИмяКлассаОбъекта,
			                            |	тбРепозиторий.ТипИнтеграции
			                            |ИЗ
			                            |	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
			                            |ГДЕ
			                            |	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона
			                            |	И (тбРепозиторий.ИмяКлассаОбъекта <> &ИмяКлассаОбъекта
			                            |			ИЛИ тбРепозиторий.ТипИнтеграции <> &ТипИнтеграции)");
			запросШаблон.УстановитьПараметр("ИдентификаторШаблона", Новый УникальныйИдентификатор(ИдентификаторШаблона));
			запросШаблон.УстановитьПараметр("ИмяКлассаОбъекта", КлассОбъекта);
			запросШаблон.УстановитьПараметр("ТипИнтеграции", ТипИнтеграции);
			
			РезультатЗапрос = запросШаблон.Выполнить();
			
			Если Не РезультатЗапрос.Пустой() Тогда
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				
				ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпРепозиторийОбъектовИнтеграции");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИмяКлассаОбъекта", "ИмяКлассаОбъекта");
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ТипИнтеграции", "ТипИнтеграции");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = РезультатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					ЗаписьОбработчик = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
					ЗаписьОбработчик.ИмяКлассаОбъекта = ВыборкаЗапрос.ИмяКлассаОбъекта;
					ЗаписьОбработчик.ТипИнтеграции = ВыборкаЗапрос.ТипИнтеграции;
					ЗаписьОбработчик.Удалить();
					
					ЗаписьСтатус = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьМенеджерЗаписи();
					ЗаписьСтатус.ИдентификаторОбработчика = Новый УникальныйИдентификатор(сткПараметры.Id);
					ЗаписьСтатус.Удалить();
					
					Если ВыборкаЗапрос.ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Исходящая Тогда
						
						сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
					
					КонецЕсли;
						
				КонецЦикла;
				
			КонецЕсли;
			
			ТекЗапись = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
			ТекЗапись.ИмяКлассаОбъекта = КлассОбъекта;
			ТекЗапись.ТипИнтеграции = ТипИнтеграции;
			ТекЗапись.ПроцедураОбработки = Строка(xdtoПакет.Body) + Символы.ПС + "~Выход:";
			ТекЗапись.Версия = сткПараметры.Version; 
			ТекЗапись.ВерсияПеременных = сткПараметры.variableVersion; 
			ТекЗапись.ИдентификаторШаблона = Новый УникальныйИдентификатор(ИдентификаторШаблона);
			ТекЗапись.Наименование = сткПараметры.Name;
			
			СтрМетодХранения = Неопределено;
			СткПараметры.Свойство("KeepObjectLink", СтрМетодХранения);
			
			Если СтрМетодХранения = Неопределено Тогда
				
				ТекЗапись.МетодХранения = Перечисления.сшпМетодХранения.ПоСсылке;
				
			Иначе
					
				ТекЗапись.МетодХранения = ?(СтрМетодХранения = Истина, Перечисления.сшпМетодХранения.ПоСсылке, Перечисления.сшпМетодХранения.Сериализация);
			
			КонецЕсли;
			
			ТекЗапись.Записать(Истина);
			
			Если ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Исходящая Тогда
				
				сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
			
			КонецЕсли;
			
			НовыйСтатус = ?(СткПараметры.IsStarted = Истина, Перечисления.сшпСтатусыОбработчиков.Включен, Перечисления.сшпСтатусыОбработчиков.Отключен);
			СшпРаботаСДанными.УстановитьСтатусОбработчика(ТекЗапись.ИдентификаторШаблона, НовыйСтатус);
			
			ОбновитьСтатусыСообщенийБезОбработчика(ТипИнтеграции, КлассОбъекта);
			
			ЗафиксироватьТранзакцию();
			
			сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ТекстОшибки = "Обновление обработчика завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id шаблона = " + ИдентификаторШаблона;
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Обновление обработчика", ТекстОшибки);
		СтатусВозврата = Ложь;
		
	КонецПопытки;
	
	Возврат СтатусВозврата;
		
КонецФункции

// Функция - Удалить обработчик события
//
// Параметры:
//  ФорматСообщения - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
// Булево - Признак успешности выполнения операции.
//
Функция УдалитьОбработчикСобытия(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	ИдентификаторШаблона = "";
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		ИдентификаторШаблона = xdtoПакет.Body;
		
		Если ТипЗнч(ИдентификаторШаблона) = Тип("Строка") Тогда
			
			ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
			|	тбРепозиторий.ИмяКлассаОбъекта,
			|	тбРепозиторий.ТипИнтеграции
			|ИЗ
			|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
			|ГДЕ
			|	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона");
			ЗапросШаблон.УстановитьПараметр("ИдентификаторШаблона", Новый УникальныйИдентификатор(ИдентификаторШаблона));
			
			РезультатЗапрос = ЗапросШаблон.Выполнить();
			
			Если Не РезультатЗапрос.Пустой() Тогда
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				
				ЭлементБлокировка = блокировкаСтатусы.Добавить("РегистрСведений.сшпРепозиторийОбъектовИнтеграции");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИмяКлассаОбъекта", "ИмяКлассаОбъекта");
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ТипИнтеграции", "ТипИнтеграции");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = РезультатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					ЗаписьОбработчик = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
					ЗаписьОбработчик.ИмяКлассаОбъекта = ВыборкаЗапрос.ИмяКлассаОбъекта;
					ЗаписьОбработчик.ТипИнтеграции = ВыборкаЗапрос.ТипИнтеграции;
					ЗаписьОбработчик.Удалить();
					
					ЗаписьСтатус = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьМенеджерЗаписи();
					ЗаписьСтатус.ИдентификаторОбработчика = Новый УникальныйИдентификатор(ИдентификаторШаблона);
					ЗаписьСтатус.Удалить();
					
					Если ВыборкаЗапрос.ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Исходящая Тогда
						
						сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
					
					КонецЕсли;
						
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
			
			сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
		ТекстОшибки = "Удаление обработчика завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id шаблона = " + ИдентификаторШаблона;
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Удаление обработчика", ТекстОшибки);
		СтатусВозврата = Ложь;
		
	КонецПопытки;
	
	Возврат СтатусВозврата;
	
КонецФункции

// Функция - Получить список версий обработчиков событий
// 
// Возвращаемое значение:
// Строка - Список шаблонов с указанием текущей версии в формате XML.
//
Функция ПолучитьСписокВерсийОбработчиковСобытий() Экспорт
	
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
	|	тбРепозиторий.ИдентификаторШаблона,
	|	тбРепозиторий.Версия,
	|	тбРепозиторий.ВерсияПеременных,
	|	ВЫБОР
	|		КОГДА тбРепозиторий.МетодХранения = ЗНАЧЕНИЕ(Перечисление.сшпМетодХранения.ПоСсылке)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МетодХранения,
	|	ВЫБОР
	|		КОГДА сшпСтатусыОбработчиков.Статус = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыОбработчиков.Включен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСтатусыОбработчиков КАК сшпСтатусыОбработчиков
	|		ПО тбРепозиторий.ИдентификаторШаблона = сшпСтатусыОбработчиков.ИдентификаторОбработчика
	|		И
	|		НЕ тбРепозиторий.ТипИнтеграции = ЗНАЧЕНИЕ(Перечисление.сшпТипыИнтеграции.Функция)");
	РезультатЗапрос = ЗапросШаблон.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		xmlЗапись.ЗаписатьНачалоЭлемента("templates1C");
		
		ВыборкаЗапрос = РезультатЗапрос.Выбрать();
		
		Пока ВыборкаЗапрос.Следующий() Цикл
			
			xmlЗапись.ЗаписатьНачалоЭлемента("template");
			
			xmlЗапись.ЗаписатьАтрибут("id", XMLСтрока(ВыборкаЗапрос.ИдентификаторШаблона));
			xmlЗапись.ЗаписатьАтрибут("version", ВыборкаЗапрос.Версия);
			xmlЗапись.ЗаписатьАтрибут("variableVersion", ВыборкаЗапрос.ВерсияПеременных);
			xmlЗапись.ЗаписатьАтрибут("KeepObjectLink", XMLСтрока(ВыборкаЗапрос.МетодХранения));
			xmlЗапись.ЗаписатьАтрибут("isStarted", XMLСтрока(ВыборкаЗапрос.Статус));
			
			xmlЗапись.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-ActualTemplateList", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
	
КонецФункции

// Функция - Получить список версий функций
// 
// Возвращаемое значение:
// Строка - Список функций с указанием текущей версии в формате XML.
//
Функция ПолучитьСписокВерсийФункций() Экспорт
	
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
	|	тбРепозиторий.ИдентификаторШаблона,
	|	тбРепозиторий.Версия,
	|	тбРепозиторий.ВерсияПеременных,
	|	ВЫБОР
	|		КОГДА тбРепозиторий.МетодХранения = ЗНАЧЕНИЕ(Перечисление.сшпМетодХранения.ПоСсылке)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МетодХранения,
	|	ВЫБОР
	|		КОГДА сшпСтатусыОбработчиков.Статус = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыОбработчиков.Включен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСтатусыОбработчиков КАК сшпСтатусыОбработчиков
	|		ПО тбРепозиторий.ИдентификаторШаблона = сшпСтатусыОбработчиков.ИдентификаторОбработчика
	|		И тбРепозиторий.ТипИнтеграции = ЗНАЧЕНИЕ(Перечисление.сшпТипыИнтеграции.Функция)");
	РезультатЗапрос = ЗапросШаблон.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		xmlЗапись.ЗаписатьНачалоЭлемента("functions1C");
		
		ВыборкаЗапрос = РезультатЗапрос.Выбрать();
		
		Пока ВыборкаЗапрос.Следующий() Цикл
			
			xmlЗапись.ЗаписатьНачалоЭлемента("function");
			
			xmlЗапись.ЗаписатьАтрибут("id", XMLСтрока(ВыборкаЗапрос.ИдентификаторШаблона));
			xmlЗапись.ЗаписатьАтрибут("version", ВыборкаЗапрос.Версия);
			xmlЗапись.ЗаписатьАтрибут("variableVersion", ВыборкаЗапрос.ВерсияПеременных);
			xmlЗапись.ЗаписатьАтрибут("KeepObjectLink", XMLСтрока(ВыборкаЗапрос.МетодХранения));
			xmlЗапись.ЗаписатьАтрибут("isStarted", XMLСтрока(ВыборкаЗапрос.Статус));
			
			xmlЗапись.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-ActualFunctionsList", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
	
КонецФункции

// Функция - Получить список обработчиков событий
//
// Параметры:
//  ФорматСообщения - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
// Булево  - Истина, если ответное сообщение успешно отправлено.
//
Функция ПолучитьСписокОбработчиковСобытий(ФорматСообщения, Пакет) Экспорт
	
	ИдентификаторШаблона = Неопределено;
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		xdtoCommand = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoПакет.Body);
		
		Если Не xdtoCommand.template = Неопределено Тогда
			
			ИдентификаторШаблона = Новый УникальныйИдентификатор(xdtoCommand.template.id);
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
		
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
	|	тбРепозиторий.ИмяКлассаОбъекта,
	|	тбРепозиторий.ТипИнтеграции,
	|	тбРепозиторий.ПроцедураОбработки,
	|	тбРепозиторий.Версия,
	|	тбРепозиторий.ИдентификаторШаблона,
	|	ВЫБОР
	|		КОГДА тбРепозиторий.МетодХранения = ЗНАЧЕНИЕ(Перечисление.сшпМетодХранения.ПоСсылке)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МетодХранения,
	|	ВЫБОР
	|		КОГДА сшпСтатусыОбработчиков.Статус = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыОбработчиков.Включен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСтатусыОбработчиков КАК сшпСтатусыОбработчиков
	|		ПО тбРепозиторий.ИдентификаторШаблона = сшпСтатусыОбработчиков.ИдентификаторОбработчика
	|		И
	|		НЕ тбРепозиторий.ТипИнтеграции = ЗНАЧЕНИЕ(Перечисление.сшпТипыИнтеграции.Функция)");
	
	Если ЗначениеЗаполнено(ИдентификаторШаблона) Тогда
		
		ЗапросШаблон.Текст = ЗапросШаблон.Текст + "
		|ГДЕ
		|	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона";
		ЗапросШаблон.УстановитьПараметр("ИдентификаторШаблона", ИдентификаторШаблона);
	
	КонецЕсли;
	
	РезультатЗапрос = ЗапросШаблон.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		xmlЗапись.ЗаписатьНачалоЭлемента("TemplateList");
		
		ВыборкаЗапрос = РезультатЗапрос.Выбрать();
		
		Пока ВыборкаЗапрос.Следующий() Цикл
			
			xmlЗапись.ЗаписатьНачалоЭлемента("Template1C");
			
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, Строка(выборкаЗапрос.ИдентификаторШаблона), "Id"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.Версия, "Version"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, "Обработчик " + ВыборкаЗапрос.ИмяКлассаОбъекта, "Name"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ?(ВыборкаЗапрос.ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Входящая,"Ingoing", "Outgoing"), "Integration"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.ИмяКлассаОбъекта, "ObjectClass");
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.ПроцедураОбработки, "Code", Истина);
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.МетодХранения, "KeepObjectLink");
			
			xmlЗапись.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-TemplateSyncMessage", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
	
КонецФункции

// Функция - Получить список функций
//
// Параметры:
//  ФорматСообщения - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
// Булево  - Истина, если ответное сообщение успешно отправлено.
//
Функция ПолучитьСписокФункций(ФорматСообщения, Пакет) Экспорт
	
	ИдентификаторШаблона = Неопределено;
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		xdtoCommand = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoПакет.Body);
		
		Если Не xdtoCommand.function = Неопределено Тогда
			
			ИдентификаторШаблона = Новый УникальныйИдентификатор(xdtoCommand.function.id);
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
		
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
	|	тбРепозиторий.ИмяКлассаОбъекта,
	|	тбРепозиторий.ТипИнтеграции,
	|	тбРепозиторий.ПроцедураОбработки,
	|	тбРепозиторий.Версия,
	|	тбРепозиторий.ИдентификаторШаблона,
	|	ВЫБОР
	|		КОГДА тбРепозиторий.МетодХранения = ЗНАЧЕНИЕ(Перечисление.сшпМетодХранения.ПоСсылке)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МетодХранения,
	|	ВЫБОР
	|		КОГДА сшпСтатусыОбработчиков.Статус = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыОбработчиков.Включен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСтатусыОбработчиков КАК сшпСтатусыОбработчиков
	|		ПО тбРепозиторий.ИдентификаторШаблона = сшпСтатусыОбработчиков.ИдентификаторОбработчика
	|		И тбРепозиторий.ТипИнтеграции = ЗНАЧЕНИЕ(Перечисление.сшпТипыИнтеграции.Функция)");
	
	Если ЗначениеЗаполнено(ИдентификаторШаблона) Тогда
		
		ЗапросШаблон.Текст = ЗапросШаблон.Текст + "
		|ГДЕ
		|	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона";
		ЗапросШаблон.УстановитьПараметр("ИдентификаторШаблона", ИдентификаторШаблона);
	
	КонецЕсли;
	
	РезультатЗапрос = ЗапросШаблон.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		xmlЗапись.ЗаписатьНачалоЭлемента("FunctionsList");
		
		ВыборкаЗапрос = РезультатЗапрос.Выбрать();
		
		Пока ВыборкаЗапрос.Следующий() Цикл
			
			xmlЗапись.ЗаписатьНачалоЭлемента("Function1C");
			
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, Строка(выборкаЗапрос.ИдентификаторШаблона), "Id"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.Версия, "Version"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, "Функция " + ВыборкаЗапрос.ИмяКлассаОбъекта, "Name"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, "Function", "Integration"); 
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.ИмяКлассаОбъекта, "ObjectClass");
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.ПроцедураОбработки, "Code", Истина);
			сшпФункцииРаботыXML.СформироватьЭлементXML(xmlЗапись, ВыборкаЗапрос.МетодХранения, "KeepObjectLink");
			
			xmlЗапись.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
		
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-FunctionSyncMessage", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
	
КонецФункции

// Функция - Получить номер версии подсистемы 1С
// 
// Возвращаемое значение:
// Булево  - признак успешно сформированного сообщения.
//
Функция ПолучитьВерсиюПодсистемы1С() Экспорт
	
	xmlЗапись = Новый ЗаписьXML;
	
	xmlЗапись.УстановитьСтроку("UTF-8");
	xmlЗапись.ЗаписатьНачалоЭлемента("info1C");
	
	xmlЗапись.ЗаписатьАтрибут("version", Строка(Формат(сшпКэшируемыеФункции.ВерсияПодсистемы(),"ЧГ=0")));
	
	СисИнфо = Новый СистемнаяИнформация;
	
	xmlЗапись.ЗаписатьАтрибут("platform", СисИнфо.ВерсияПриложения);
	
	xmlЗапись.ЗаписатьКонецЭлемента();

	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-ActualVersion1C", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
	
КонецФункции

// Функция - Получить состояние обработки данных по запросу GPS
// 
// Возвращаемое значение:
// ЗаписьXML  - состояние обработки.
//
Функция ПолучитьСостояниеОбработки() Экспорт
		
	//Статистика
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(сшпСостояниеСообщений.СтатусСообщения, НЕОПРЕДЕЛЕНО) КАК Статус,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ сшпОчередьИсходящихСообщений.ИдентификаторСобытия) КАК Количество
	               |ИЗ
	               |	РегистрСведений.сшпОчередьИсходящихСообщений КАК сшпОчередьИсходящихСообщений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
	               |		ПО сшпОчередьИсходящихСообщений.ИдентификаторСобытия = сшпСостояниеСообщений.ИдентификаторСобытия
	               |			И (сшпСостояниеСообщений.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОжиданиеОбработки)
	               |				ИЛИ сшпСостояниеСообщений.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ВОбработке)
	               |				ИЛИ сшпСостояниеСообщений.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОжиданиеОтправки))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(сшпСостояниеСообщений.СтатусСообщения, НЕОПРЕДЕЛЕНО)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	сшпОчередьИсходящихСообщений.ОбъектСобытия КАК Объект,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ сшпОчередьИсходящихСообщений.ИдентификаторСобытия) КАК Количество
	               |ИЗ
	               |	РегистрСведений.сшпОчередьИсходящихСообщений КАК сшпОчередьИсходящихСообщений
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	сшпОчередьИсходящихСообщений.ОбъектСобытия";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПакетСтатистики = Новый Структура();
	ВсеОбъекты = Новый Структура();
	СтатистикаПоСтатусам = Новый Структура();
	СтатистикаПоТипам = Новый Структура();
	
	РезультатПоСтатусам = РезультатЗапроса[0].Выбрать();
	Пока РезультатПоСтатусам.Следующий() Цикл
		
		Если Не РезультатПоСтатусам.Статус = Неопределено Тогда
			
			СтатистикаПоСтатусам.Вставить(XMLСтрока(РезультатПоСтатусам.Статус), РезультатПоСтатусам.Количество);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоТипам = РезультатЗапроса[1].Выбрать();
	Пока РезультатПоТипам.Следующий() Цикл
		
		РезультатПоТипамОбъект = СтрЗаменить(СтрЗаменить(РезультатПоТипам.Объект, ".", ""), " ", "");

	    Если (КодСимвола(РезультатПоТипамОбъект, 1)>=48) И (КодСимвола(РезультатПоТипамОбъект, 1)<=57) Тогда
	        РезультатПоТипамОбъект = "_" + РезультатПоТипамОбъект;
	    КонецЕсли;
		
		СтатистикаПоТипам.Вставить(РезультатПоТипамОбъект, РезультатПоТипам.Количество);
		
	КонецЦикла;
	
	ВсеОбъекты.Вставить("object", СтатистикаПоТипам);
	ВсеОбъекты.Вставить("status", СтатистикаПоСтатусам);
	
	Если сшпРаботаСКонстантами.ТипКоннектораВебСервисы() Тогда
		ВсеОбъекты.Вставить("threads", Строка(сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", "ОбработатьВходящееСообщениеБезОчереди")));
	КонецЕсли;
	
	ПакетСтатистики.Вставить("data", ВсеОбъекты);
	
	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-ProcessingStatus1C");
	РезультатОбработки.Body = сшпФункцииРаботыXML.СформироватьXML(ПакетСтатистики, Истина);
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
	
КонецФункции

// Функция - Получить параметры подключения к информационной базе
// 
// Возвращаемое значение:
// ЗаписьXML  - параметры подключения к информационной базе 1С.
//
Функция ПолучитьПараметрыПодключения() Экспорт
	
	СтрокаСоединения = сшпРаботаСоСтроками._СтрРазделить(СтрокаСоединенияИнформационнойБазы(), ";");
	
	Если СтрокаСоединения.Количество() < 2 Тогда 
		
		ИмяСервера = "";
		ИмяИБ = "";
		
	Иначе
		 
		ИмяСервера = Сред(СтрокаСоединения[0], 7, СтрДлина(СтрокаСоединения[0]) - 7);
		ИмяИБ = Сред(СтрокаСоединения[1], 6, СтрДлина(СтрокаСоединения[1]) - 6);
		
	КонецЕсли;
	
	xmlЗапись = Новый ЗаписьXML;
	xmlЗапись.УстановитьСтроку("UTF-8");
	
	xmlЗапись.ЗаписатьНачалоЭлемента("database");
	
	xmlЗапись.ЗаписатьАтрибут("name", ИмяИБ);
	xmlЗапись.ЗаписатьАтрибут("serverUri", ИмяСервера);
	
	xmlЗапись.ЗаписатьКонецЭлемента();

	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-InfoBaseConnectionString1C", xmlЗапись.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
	
КонецФункции

// Функция - Получить структуру конфигурации
// 
// Возвращаемое значение:
// Строка - Описание структуры конфигурации в формате передачи сообщений (XML, FastInfoset, JSON).
//
Функция ПолучитьСтруктуруКонфигурации() Экспорт
	
	xmlКонфигурация = Новый ЗаписьXML;
	xmlКонфигурация.УстановитьСтроку("UTF-8");
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Конфигурация");
	
	xmlКонфигурация.ЗаписатьАтрибут("Имя", Метаданные.Имя);
	xmlКонфигурация.ЗаписатьАтрибут("Версия", Метаданные.Версия);
	
	СоответствиеПредставленийТипов = Новый Соответствие;
	ДобавитьВДеревоСтрокиПоМетаданным(Метаданные, "Константы", xmlКонфигурация, , СоответствиеПредставленийТипов);

	МассивОбщихРеквизитов = Новый Массив;
	
	Для Каждого ЭлементМетаданных Из Метаданные.ОбщиеРеквизиты Цикл
		
		МассивТипов = ЭлементМетаданных.Тип.Типы();
		
		ОписаниеТипа = Новый Массив;
		
		Для Каждого ЭлементМассиваТипов Из МассивТипов Цикл
			
			ПредставлениеТипа = СоответствиеПредставленийТипов[ЭлементМассиваТипов];
			
			Если ПредставлениеТипа = Неопределено Тогда 
				
				ПредставлениеТипа = ПолучитьПредставлениеТипа(ЭлементМассиваТипов);
				СоответствиеПредставленийТипов.Вставить(ЭлементМассиваТипов, ПредставлениеТипа);
			
			КонецЕсли;
			
			ОписаниеТипа.Добавить(ПредставлениеТипа);
		
		КонецЦикла;
		
		АвтоИспользование = элементМетаданных.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
		СоставРеквизита = Новый Массив;
		
		Для Каждого ЭлементСостава Из элементМетаданных.Состав Цикл 
			
			Если АвтоИспользование И ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
				Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда 
				
				СоставРеквизита.Добавить(ЭлементСостава.Метаданные.ПолноеИмя());
			
			КонецЕсли;
		
		КонецЦикла;
		
		ОписаниеТипа = сшпРаботаСоСтроками._СтрСоединить(ОписаниеТипа, ";");
		МассивОбщихРеквизитов.Добавить(Новый Структура("Имя, Состав, ОписаниеТипа", элементМетаданных.Имя, СоставРеквизита, ОписаниеТипа)); 
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Справочники");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Справочники Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Документы");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Перечисления");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Перечисления Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "ЗначенияПеречисления", xmlКонфигурация, Ложь, СоответствиеПредставленийТипов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыСведений");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыСведений Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("ПланыВидовХарактеристик");
	
	Для Каждого ЭлементМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(ТабличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("ПланыВидовРасчета");
	
	Для Каждого ЭлементМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("ПланыСчетов");
	
	Для Каждого ЭлементМетаданных Из Метаданные.ПланыСчетов Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация,, СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыБухгалтерии");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыБухгалтерии Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыНакопления");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыНакопления Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("РегистрыРасчета");
	
	Для Каждого ЭлементМетаданных Из Метаданные.РегистрыРасчета Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Измерения", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Ресурсы", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("БизнесПроцессы");
	
	Для Каждого ЭлементМетаданных Из Метаданные.БизнесПроцессы Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	
	xmlКонфигурация.ЗаписатьНачалоЭлемента("Задачи");
	
	Для Каждого ЭлементМетаданных Из Метаданные.Задачи Цикл
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента(элементМетаданных.Имя);
		
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "СтандартныеРеквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоМетаданным(элементМетаданных, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
		ДобавитьВДеревоСтрокиПоОбщимРеквизитам(элементМетаданных, "ОбщиеРеквизиты", xmlКонфигурация, МассивОбщихРеквизитов);
		
		xmlКонфигурация.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		
		Для Каждого ТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл
			
			xmlКонфигурация.ЗаписатьНачалоЭлемента(табличнаяЧасть.Имя);
			
			ДобавитьВДеревоСтрокиПоМетаданным(табличнаяЧасть, "Реквизиты", xmlКонфигурация, , СоответствиеПредставленийТипов);
			
			xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		КонецЦикла;
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
		xmlКонфигурация.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	xmlКонфигурация.ЗаписатьКонецЭлемента();
	
	Пакет = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-1c-Metadata", xmlКонфигурация.Закрыть());
	
	Возврат сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(Пакет);
	
КонецФункции

// Процедура - Добавить в дерево строки по метаданным
//
// Параметры:
//  УзелМетаданных - Метаданные - узел метаданных изкоторого будут читаться объекты
//  ИмяОбъекта - Строка - имя объекта метаданных 
//  xmlУзел - ЗаписьXML - узел в которые будет выполняться добавление элементов
//	ДобавлятьОписаниеТипа - Булево - добавлять описание типа
//	СоответствиеПредставленийТипов - Соответствие - соответствие представлений типов 
//
Процедура ДобавитьВДеревоСтрокиПоМетаданным(УзелМетаданных, ИмяОбъекта, xmlУзел, ДобавлятьОписаниеТипа = Истина, СоответствиеПредставленийТипов)
	
	xmlУзел.ЗаписатьНачалоЭлемента(ИмяОбъекта);
	
	Попытка
		
		Для Каждого ЭлементМетаданных Из УзелМетаданных[ИмяОбъекта] Цикл
			
			Если ДобавлятьОписаниеТипа Тогда
				 
				ОписаниеТипа = Новый Массив;
				МассивТипов = элементМетаданных.Тип.Типы();
				
				Для Каждого ЭлементМассиваТипов Из МассивТипов Цикл
					
					ПредставлениеТипа = СоответствиеПредставленийТипов[ЭлементМассиваТипов];
					
					Если ПредставлениеТипа = Неопределено Тогда
						 
						ПредставлениеТипа = ПолучитьПредставлениеТипа(ЭлементМассиваТипов);
						СоответствиеПредставленийТипов.Вставить(ЭлементМассиваТипов, ПредставлениеТипа);
						
					КонецЕсли;
					
					ОписаниеТипа.Добавить(ПредставлениеТипа);
					
				КонецЦикла;
			
				ОписаниеТипа = сшпРаботаСоСтроками._СтрСоединить(ОписаниеТипа, ";");
				сшпФункцииРаботыXML.СформироватьУзелXML(xmlУзел, Неопределено, элементМетаданных.Имя, , Новый Структура("Тип", ОписаниеТипа));
				
			Иначе
				
				сшпФункцииРаботыXML.СформироватьУзелXML(xmlУзел, Неопределено, элементМетаданных.Имя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
	КонецПопытки;
	
	xmlУзел.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Процедура - Добавить в дерево строки по метаданным
//
// Параметры:
//  УзелМетаданных - Метаданные - узел метаданных изкоторого будут читаться объекты 
//  ИмяОбъекта - Строка - имя объекта метаданных 
//  xmlУзел	- ЗаписьXML - узел в которые будет выполняться добавление элементов
//	МассивОбщихРеквизитов - Массив - Содержит элементы с структурой описанием общих реквизитов
//
Процедура ДобавитьВДеревоСтрокиПоОбщимРеквизитам(УзелМетаданных, ИмяОбъекта, xmlУзел, МассивОбщихРеквизитов)
	
	xmlУзел.ЗаписатьНачалоЭлемента(ИмяОбъекта);
	
	ИмяУзла = УзелМетаданных.ПолноеИмя();
	
	Попытка
		
		Для Каждого ЭлементСоответствия Из МассивОбщихРеквизитов Цикл
			
			Если ЭлементСоответствия.Состав.Найти(ИмяУзла) <> Неопределено Тогда 
				
				сшпФункцииРаботыXML.СформироватьУзелXML(xmlУзел, Неопределено, ЭлементСоответствия.Имя, , Новый Структура("Тип", ЭлементСоответствия.ОписаниеТипа));
			
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
	КонецПопытки;
	
	xmlУзел.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Функция - ПолучитьПредставлениеТипа
//
// Параметры:
//	ТипОписания - Тип - тип по которому будет получено представление
//
// Возвращаемое значение:
//	Строка - Строковое представление типа
//
Функция ПолучитьПредставлениеТипа(ТипОписания) Экспорт
	 
	ОМ = Метаданные.НайтиПоТипу(ТипОписания);
	
	Если Не ОМ = Неопределено Тогда
		 
		ИмяОМ = ОМ.Имя;
		НайденныйТип = Метаданные.Перечисления.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Перечисления." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.Справочники.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Справочники." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.Документы.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Документы." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.ПланыВидовХарактеристик.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			
			Возврат "ПланыВидовХарактеристик." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.ПланыВидовРасчета.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "ПланыВидовРасчета." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.ПланыСчетов.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "ПланыСчетов." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.БизнесПроцессы.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "БизнесПроцессы." + ОМ.Имя;
			
		КонецЕсли;
		
		НайденныйТип = Метаданные.Задачи.Найти(ИмяОМ);
		
		Если НайденныйТип <> Неопределено Тогда
			 
			Возврат "Задачи." + ОМ.Имя;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Строка(ТипОписания);
		
	КонецЕсли;
	
КонецФункции

// Процедура - Обновить статусы сообщений без обработчика
//
// Параметры:
//  ТипИнтеграции - Перечисление.сшпТипыИнтеграции - Тип интеграции для определения очереди в котоой надо обработать сообщения. 
//  Класс - Строка - Идентификатор класса для которого поступил обработчик и требуется изменить статус сообщений на "ОжиданиеОбработки".
//
Процедура ОбновитьСтатусыСообщенийБезОбработчика(ТипИнтеграции, Класс) Экспорт
	
	ТекстЗапрос = "";
	
	Если ТипИнтеграции = Перечисления.сшпТипыИнтеграции.Исходящая Тогда
				
		ТекстЗапрос = "ВЫБРАТЬ
		|	тбИсходящая.ИдентификаторСобытия
		|ИЗ
		|	РегистрСведений.сшпОчередьИсходящихСообщений КАК тбИсходящая
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
		|		ПО тбИсходящая.ИдентификаторСобытия = тбСостояние.ИдентификаторСобытия
		|		И (тбИсходящая.ОбъектСобытия = &Класс)
		|		И (тбСостояние.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОтсутствуетОбработчик))";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;	
	
	ЗапросОбновление = Новый Запрос(ТекстЗапрос);
	ЗапросОбновление.УстановитьПараметр("Класс", Класс);
	
	РезультатЗапрос = ЗапросОбновление.Выполнить();
	
	Если Не РезультатЗапрос.Пустой() Тогда
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Попытка
			
			БлокировкаСтатусы = Новый БлокировкаДанных;
			
			ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпСостояниеСообщений");
			ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
			ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИдентификаторСобытия", "ИдентификаторСобытия");
			ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
			
			БлокировкаСтатусы.Заблокировать();
			
			ВыборкаЗапрос = РезультатЗапрос.Выбрать();
			
			Пока ВыборкаЗапрос.Следующий() Цикл
				
				сшпРаботаСДанными.УстановитьСостояниеСообщения(выборкаЗапрос.ИдентификаторСобытия, Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки, , , , , Перечисления.сшпТипыИнтеграции.Исходящая);
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ЗаписьЖурналаРегистрации("Datareon. Изменение статуса сообщения", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
			ОтменитьТранзакцию();
		
		КонецПопытки;
	
	КонецЕсли;

КонецПроцедуры

// Процедура - Отправить сообщение об ошибке
//
// Параметры:
//  Класс - Строка - тип класса ошибки. 
//  Описание - Строка - описание ошибки. 
//  Свойства - Структура - дополнительные свойства ошибки. 
//
Процедура ОтправитьСообщениеОбОшибке(Класс, Описание, Свойства) Экспорт
	
	Пакет = сшпОбщегоНазначения.СформироватьСтруктуруПакета("TER", Класс, Описание);
	Пакет.Properties = Свойства;
	
	сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(Пакет);
	
КонецПроцедуры	

// Процедура - Отправить состояние сообщения
//
// Параметры:
//  Идентификатор - Строка - идентификатор сообщения
//  Состояние - Перечисление.сшпСтатусыСообщений - Статус для отправки
//  ТекстОшибки - Строка - Текст ошибки
//  Задержка - Число - Количество секунд
//  Направление - Перечисление.сшпТипыИнтеграции - получение или отправка сообщений
//  ДопСвойства - Структура - Дополнительные свойства, добавляемые в ACK
//
Процедура ОтправитьСостояниеСообщения(Идентификатор, Состояние, ТекстОшибки = "", Задержка = 0, 
										Направление = Неопределено, КлассИд = "", ДопСвойства = Неопределено) Экспорт
	
	КодСтатуса = -1;
	
	Если ТипЗнч(Состояние) = Тип("Число") Тогда
		
		КодСтатуса = Состояние;
		
	Иначе
		
		КодСтатуса = сшпКэшируемыеФункции.ПолучитьОбщийКодСостоянияОбработки(Состояние, Направление);
		
	КонецЕсли;
	
	Если КодСтатуса > -1 Тогда
		
		СвойстваСообщения = Новый Структура;
		СвойстваСообщения.Вставить("MessageId", Идентификатор);
		СвойстваСообщения.Вставить("Status", КодСтатуса);
		СвойстваСообщения.Вставить("Error", ТекстОшибки);
		СвойстваСообщения.Вставить("LockTime", Задержка);
		СвойстваСообщения.Вставить("MessageClassId", Строка(КлассИд));
		
		Если Не ДопСвойства = Неопределено И 
				ТипЗнч(ДопСвойства) = Тип("Структура") Тогда
			Для Каждого СтрокаДопСвойств Из ДопСвойства Цикл
				СвойстваСообщения.Вставить(СтрокаДопСвойств.Ключ, СтрокаДопСвойств.Значение);
			КонецЦикла;
		КонецЕсли; 
		
		Пакет = сшпОбщегоНазначения.СформироватьСтруктуруПакета("ACK", "Esb-MessageAck");	
		Пакет.Properties = СвойстваСообщения;
		
		сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(Пакет);	
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Управление состоянием обработчика
//
// Параметры:
//  Формат - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - ОбъектXDTO - объект сообщения.
// 
// Возвращаемое значение:
//  Булево - Признак успешности обновления статуса обработчика события.
//
Функция УправлениеСостояниемОбработчика(Формат, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	
	Попытка
		
		xdtoСообщение = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Формат, Пакет);
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Формат, xdtoСообщение.Body);
		
		Идентификатор = xdtoПакет.Id;
		Статус = ?(Булево(xdtoПакет.IsStarted) = Истина, Перечисления.сшпСтатусыОбработчиков.Включен, Перечисления.сшпСтатусыОбработчиков.Отключен);
		
		сшпРаботаСДанными.УстановитьСтатусОбработчика(Новый УникальныйИдентификатор(идентификатор), Статус);
		сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
	
	Исключение
		
		ТекстОшибки = "Изменение статуса обработчика завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id = " + идентификатор;
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Изменение статуса обработчика", ТекстОшибки); 
		СтатусВозврата = Ложь;
	
	КонецПопытки;
	
	Возврат СтатусВозврата;	

КонецФункции

// Функция - Возврат пакетов в обработку
//
// Параметры:
//  ФорматСообщения - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
//  Булево - Признак успешности выполнения операции.
//
Функция ВозвратПакетовВОбработку(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	СписокИдентификаторов = Новый Массив;
	СоотвПоиска = Новый Соответствие;
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		xdtoCommand = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoПакет.Body);
		
		Последовательность = xdtoCommand.Последовательность();
		КоличествоИдентификаторов = Последовательность.Количество();
		
		Если КоличествоИдентификаторов > 0 Тогда
			
			Для Индекс = 0 По КоличествоИдентификаторов - 1 Цикл
				
				СписокИдентификаторов.Добавить(Новый УникальныйИдентификатор(Последовательность.ПолучитьЗначение(Индекс)));
				СоотвПоиска.Вставить(СписокИдентификаторов[СписокИдентификаторов.Количество() - 1], Ложь);
			
			КонецЦикла;
		
		КонецЕсли;
			
	Исключение
	
	КонецПопытки;
	
	Если СписокИдентификаторов.Количество() Тогда
		
		ЗапросСтатусы = Новый Запрос("ВЫБРАТЬ
		|	сшпСостояниеСообщений.ИдентификаторСобытия
		|ИЗ
		|	РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
		|ГДЕ
		|	сшпСостояниеСообщений.СтатусСообщения = ЗНАЧЕНИЕ(Перечисление.сшпСтатусыСообщений.ОшибкаОбработки)
		|	И сшпСостояниеСообщений.ИдентификаторСобытия В(&СписокСообщений)");
		ЗапросСтатусы.УстановитьПараметр("СписокСообщений", СписокИдентификаторов);
		
		РезультатЗапрос = ЗапросСтатусы.Выполнить();
		
		Если Не РезультатЗапрос.Пустой() Тогда
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Попытка
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				
				ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпСостояниеСообщений");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИдентификаторСобытия", "ИдентификаторСобытия");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = РезультатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					сшпРаботаСДанными.УстановитьСостояниеСообщения(ВыборкаЗапрос.ИдентификаторСобытия, Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки, , , , , Перечисления.сшпТипыИнтеграции.Исходящая);
				
					ЗначСоответствия = СоотвПоиска.Получить(ВыборкаЗапрос.ИдентификаторСобытия);
					
					Если Не ЗначСоответствия = Неопределено Тогда
						
						СоотвПоиска[ВыборкаЗапрос.ИдентификаторСобытия] = Истина;
						
					КонецЕсли;
				
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			
			Исключение
				
				ОтменитьТранзакцию();
				ТекстОшибки = "Изменение статуса обработчика сообщения ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id = " + сшпРаботаСоСтроками._СтрСоединить(списокИдентификаторов, ",");
				сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Изменение статуса сообщения", ТекстОшибки); 
				статусВозврата = Ложь;
			
			КонецПопытки;
			
			Если СтатусВозврата И сшпФункциональныеОпции.АвтоматическийСтартОбработчиков() Тогда
				
				сшпОбщегоНазначения.ЗапуститьОбработчикОчереди("ОбработкаОчередиИсходящихСообщений");
			
			КонецЕсли;	
		
		КонецЕсли;
	
		Если СтатусВозврата Тогда
			
			xmlРезультат = Новый ЗаписьXML;
			xmlРезультат.УстановитьСтроку("UTF-8");
			xmlРезультат.ЗаписатьНачалоЭлемента("RMLResult");
			
			Для Каждого СтрокаСоответствия Из СоотвПоиска Цикл
				
				xmlРезультат.ЗаписатьНачалоЭлемента("row");
				
				xmlРезультат.ЗаписатьНачалоЭлемента("Id");
				
				xmlРезультат.ЗаписатьТекст(XMLСтрока(СтрокаСоответствия.Ключ));
				
				xmlРезультат.ЗаписатьКонецЭлемента();
				
				xmlРезультат.ЗаписатьНачалоЭлемента("WasFound");
				
				xmlРезультат.ЗаписатьТекст(XMLСтрока(СтрокаСоответствия.Значение));
				
				xmlРезультат.ЗаписатьКонецЭлемента();
				
				xmlРезультат.ЗаписатьКонецЭлемента();
				
			КонецЦикла;				
			
			xmlРезультат.ЗаписатьКонецЭлемента();
			
			ПакетРезультат = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-RMLResult", xmlРезультат.Закрыть());
			
			ПакетРезультат.CorrelationId = xdtoПакет.CorrelationId;
			
			ПакетРезультат.Properties = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет); 
			
			сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(ПакетРезультат);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат статусВозврата;
	
КонецФункции	

// Функция - НайтиСообщения
//
// Параметры:
//  ФорматСообщения - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
//	текИдентификатор - УникальныйИдентификатор - идентификатор сообщения	
// 
// Возвращаемое значение:
//  Булево - Признак успешности выполнения операции.
//
Функция НайтиСообщения(ФорматСообщения, Пакет, текИдентификатор) Экспорт
	
	РезультВыполнения = Истина;
	ПакетРезультат = Неопределено;
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
		
		ТелоСообщения = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoПакет.Body);
		
		ПараметрыЗапроса = Неопределено;
		Попытка
			ПараметрыЗапроса = ТелоСообщения.ПолучитьСписок("options");
		Исключение
		КонецПопытки;
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТелоСообщения.Получить("text");
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Если Не ПараметрыЗапроса = Неопределено Тогда
							
			Для Сч = 0 По ПараметрыЗапроса.Количество()-1 Цикл
				
				Попытка
					
					УстановкаПараметра = ПараметрыЗапроса.Получить(Сч);
					Если ТипЗнч(УстановкаПараметра) = Тип("Строка") Тогда
						//@skip-check server-execution-safe-mode
						Выполнить(ПараметрыЗапроса.Получить(Сч));
					КонецЕсли;
					
				Исключение
					
					ЗаписьЖурналаРегистрации("Datareon. Поиск сообщений", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НайденныеОбъекты.Ссылка КАК Ссылка
		|ИЗ
		|	НайденныеОбъекты КАК НайденныеОбъекты
		|
		|СГРУППИРОВАТЬ ПО
		|	НайденныеОбъекты.Ссылка";
				
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		xmlРезультат = Новый ЗаписьXML;
		xmlРезультат.УстановитьСтроку("UTF-8");
		
		xmlРезультат.ЗаписатьНачалоЭлемента("FindResult");
		
		xmlРезультат.ЗаписатьНачалоЭлемента("Messages");
		
		СтруктураАтрибутов = Новый Структура("Id");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктураАтрибутов.Id = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
			сшпФункцииРаботыXML.СформироватьУзелXML(xmlРезультат, Неопределено, "Message", , СтруктураАтрибутов);
			
		КонецЦикла;
		
		xmlРезультат.ЗаписатьКонецЭлемента();
		
		xmlРезультат.ЗаписатьНачалоЭлемента("Messages1C");
		
		СтруктураАтрибутов1С = Новый Структура("Id, Status, StatusDate, RegisterDate, Error");
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НайденныеОбъекты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ НайденныеИндексированныеОбъекты
		|ИЗ
		|	НайденныеОбъекты КАК НайденныеОбъекты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	сшпОчередьИсходящихСообщений.ИдентификаторСобытия КАК ИдентификаторСобытия,
		|	сшпОчередьИсходящихСообщений.ДатаРегистрации КАК ДатаРегистрации
		|ПОМЕСТИТЬ Сообщения
		|ИЗ
		|	РегистрСведений.сшпОчередьИсходящихСообщений КАК сшпОчередьИсходящихСообщений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеИндексированныеОбъекты КАК НайденныеИндексированныеОбъекты
		|		ПО сшпОчередьИсходящихСообщений.СсылкаНаОбъект = НайденныеИндексированныеОбъекты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	сшпСостояниеСообщений.СтатусСообщения КАК Status,
		|	сшпСостояниеСообщений.ДатаИзменения КАК StatusDate,
		|	Сообщения.ИдентификаторСобытия КАК Id,
		|	Сообщения.ДатаРегистрации КАК RegisterDate,
		|	сшпСостояниеСообщений.ОписаниеОшибки КАК Error
		|ИЗ
		|	Сообщения КАК Сообщения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК сшпСостояниеСообщений
		|		ПО Сообщения.ИдентификаторСобытия = сшпСостояниеСообщений.ИдентификаторСобытия";
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураАтрибутов1С, ВыборкаДетальныеЗаписи);
			сшпФункцииРаботыXML.СформироватьУзелXML(xmlРезультат, Неопределено, "Message1C", , СтруктураАтрибутов1С);			
			
		КонецЦикла;
		
		xmlРезультат.ЗаписатьКонецЭлемента();		
		
		xmlРезультат.ЗаписатьКонецЭлемента();
		
		ПакетРезультат = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM","Esb-FindResult", xmlРезультат.Закрыть());
		
		ПакетРезультат.CorrelationId = xdtoПакет.CorrelationId;
		ПакетРезультат.ReplyTo = xdtoПакет.ReplyTo;
		  
		Если СткПараметры.Свойство("NodeConfigurationId") Тогда
			                     
			СвойстваСообщения = Новый Структура("NodeConfigurationId", сткПараметры.NodeConfigurationId);
			ПакетРезультат.Properties = СвойстваСообщения;
			
		КонецЕсли;
		
		РезультВыполнения = сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(ПакетРезультат);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Datareon. Поиск сообщений", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РезультВыполнения = Ложь;
		
	КонецПопытки;
	
	Возврат РезультВыполнения;
			
КонецФункции


// Процедура - Подтвердить отправку сообщения в ESB
// 
// Параметры:
// 	ФорматСообщения - Перечисления.сшпФорматыСообщений - Формат сообщения
// 	Сообщение - Строка - Тело сообщения
//
Процедура ПодтвердитьОтправкуСообщения(ФорматСообщения, Сообщение) Экспорт
	
	xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Сообщение);
	сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
	Идентификатор = Строка(сткПараметры.id);
	
	сшпРаботаСДанными.УстановитьСостояниеСообщения(Идентификатор, Перечисления.сшпСтатусыСообщений.ОтправкаПодтверждена, , , , , Перечисления.сшпТипыИнтеграции.Исходящая, , Идентификатор);	
	
КонецПроцедуры

// Функция - Обновить функцию
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
// Булево  - Признак успешности обновления функции.
//
Функция ОбновитьФункцию(ФорматСообщения, Пакет) Экспорт
	
	Перем Кэшируемая;
	
	СтатусВозврата = Истина;
	ИдентификаторШаблона = "";
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		сткПараметры = сшпОбщегоНазначения.ПолучитьПараметрыСообщенияСтруктурой(xdtoПакет);
		ИдентификаторШаблона = сткПараметры.Id;
		классОбъекта = сткПараметры.ObjectClass;
		
		Если ТипЗнч(классОбъекта) = Тип("Строка") Тогда
			
			Если сткПараметры.Integration = "Function" Тогда
				
				типИнтеграции = Перечисления.сшпТипыИнтеграции.Функция; 
				
			Иначе
				
				ТекстОшибки = "Обновление функции завершилось ошибкой: Параметры интеграции не совпадают с типом сообщения" + Символы.ПС + "id шаблона = " + ИдентификаторШаблона;
				сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Обновление функции", ТекстОшибки);
				
				Возврат Ложь;
				
			КонецЕсли;
			
			сткПараметры.Свойство("Cached", Кэшируемая);
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
			//если именился класс или тип интеграции функции, то удалим старую функцию
			ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
			                            |	тбРепозиторий.ИмяКлассаОбъекта,
			                            |	тбРепозиторий.ТипИнтеграции
			                            |ИЗ
			                            |	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
			                            |ГДЕ
			                            |	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона
			                            |	И (тбРепозиторий.ИмяКлассаОбъекта <> &ИмяКлассаОбъекта
			                            |			ИЛИ тбРепозиторий.ТипИнтеграции <> &ТипИнтеграции)");
			ЗапросШаблон.УстановитьПараметр("ИдентификаторШаблона", Новый УникальныйИдентификатор(ИдентификаторШаблона));
			ЗапросШаблон.УстановитьПараметр("ИмяКлассаОбъекта", классОбъекта);
			ЗапросШаблон.УстановитьПараметр("ТипИнтеграции", типИнтеграции);
			РезультатЗапрос = ЗапросШаблон.Выполнить();
			
			Если Не РезультатЗапрос.Пустой() Тогда
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпРепозиторийОбъектовИнтеграции");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИмяКлассаОбъекта", "ИмяКлассаОбъекта");
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ТипИнтеграции", "ТипИнтеграции");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = результатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					ЗаписьОбработчик = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
					ЗаписьОбработчик.ИмяКлассаОбъекта = ВыборкаЗапрос.ИмяКлассаОбъекта;
					ЗаписьОбработчик.ТипИнтеграции = ВыборкаЗапрос.ТипИнтеграции;
					ЗаписьОбработчик.Удалить();
					
					ЗаписьСтатус = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьМенеджерЗаписи();
					ЗаписьСтатус.ИдентификаторОбработчика = Новый УникальныйИдентификатор(сткПараметры.Id);
					ЗаписьСтатус.Удалить();
					
					сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
					
				КонецЦикла;
				
			КонецЕсли;
			
			текЗапись = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
			текЗапись.ИмяКлассаОбъекта = классОбъекта;
			текЗапись.ТипИнтеграции = типИнтеграции;
			текЗапись.ПроцедураОбработки = Строка(xdtoПакет.Body);
			текЗапись.Версия = сткПараметры.Version; 
			текЗапись.ВерсияПеременных = сткПараметры.variableVersion; 
			текЗапись.ИдентификаторШаблона = Новый УникальныйИдентификатор(ИдентификаторШаблона);
			текЗапись.Наименование = сткПараметры.Name;
			стрМетодХранения = Неопределено;
			сткПараметры.Свойство("KeepObjectLink", стрМетодХранения);
			текЗапись.МетодХранения = Перечисления.сшпМетодХранения.ПоСсылке;
			текЗапись.КэшируемаяФункция = Кэшируемая;
			текЗапись.Записать(Истина);
			
			сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
			
			новыйСтатус = ?(сткПараметры.IsStarted = Истина, Перечисления.сшпСтатусыОбработчиков.Включен, Перечисления.сшпСтатусыОбработчиков.Отключен);
			сшпРаботаСДанными.УстановитьСтатусОбработчика(текЗапись.ИдентификаторШаблона, новыйСтатус);
						
			ЗафиксироватьТранзакцию();
			
			сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстОшибки = "Обновление функции завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id шаблона = " + ИдентификаторШаблона;
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Обновление функции", ТекстОшибки);
		статусВозврата = Ложь;
		
	КонецПопытки;
	
	Возврат статусВозврата;
	
КонецФункции

// Функция - Удалить функцию
//
// Параметры:
//  ФорматСообщения	 - Перечисление.сшпФорматыСообщений - Формат поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
// Булево  - Признак успешности выполнения операции.
//
Функция УдалитьФункцию(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	ИдентификаторШаблона = "";
	
	Попытка
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		ИдентификаторШаблона = xdtoПакет.Body;
		
		Если ТипЗнч(ИдентификаторШаблона) = Тип("Строка") тогда
			
			ЗапросШаблон = Новый Запрос("ВЫБРАТЬ
			|	тбРепозиторий.ИмяКлассаОбъекта,
			|	тбРепозиторий.ТипИнтеграции
			|ИЗ
			|	РегистрСведений.сшпРепозиторийОбъектовИнтеграции КАК тбРепозиторий
			|ГДЕ
			|	тбРепозиторий.ИдентификаторШаблона = &ИдентификаторШаблона");
			ЗапросШаблон.УстановитьПараметр("ИдентификаторШаблона", Новый УникальныйИдентификатор(ИдентификаторШаблона));
			
			РезультатЗапрос = ЗапросШаблон.Выполнить();
			
			Если НЕ РезультатЗапрос.Пустой() тогда
				
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
				БлокировкаСтатусы = Новый БлокировкаДанных;
				
				ЭлементБлокировка = БлокировкаСтатусы.Добавить("РегистрСведений.сшпРепозиторийОбъектовИнтеграции");
				ЭлементБлокировка.ИсточникДанных = РезультатЗапрос;
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ИмяКлассаОбъекта", "ИмяКлассаОбъекта");
				ЭлементБлокировка.ИспользоватьИзИсточникаДанных("ТипИнтеграции", "ТипИнтеграции");
				ЭлементБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				
				БлокировкаСтатусы.Заблокировать();
				
				ВыборкаЗапрос = РезультатЗапрос.Выбрать();
				
				Пока ВыборкаЗапрос.Следующий() Цикл
					
					записьОбработчик = РегистрыСведений.сшпРепозиторийОбъектовИнтеграции.СоздатьМенеджерЗаписи();
					записьОбработчик.ИмяКлассаОбъекта = ВыборкаЗапрос.ИмяКлассаОбъекта;
					записьОбработчик.ТипИнтеграции = ВыборкаЗапрос.ТипИнтеграции;
					записьОбработчик.Удалить();
					
					ЗаписьСтатус = РегистрыСведений.сшпСтатусыОбработчиков.СоздатьМенеджерЗаписи();
					ЗаписьСтатус.ИдентификаторОбработчика = Новый УникальныйИдентификатор(ИдентификаторШаблона);
					ЗаписьСтатус.Удалить();
										
					сшпРаботаСКонстантами.УстановитьЗначениеКонстанты("сшпВерсияОбработчиков", Строка(Новый УникальныйИдентификатор));
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
			
			сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
			
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстОшибки = "Удаление функции завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id шаблона = " + ИдентификаторШаблона;
		
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Удаление функции", ТекстОшибки);
		
		СтатусВозврата = Ложь;
		
	КонецПопытки;
	
	Возврат СтатусВозврата;
	
КонецФункции

// Функция - Управление состоянием функции
//
// Параметры:
//  ФорматСообщения	- Перечисление.сшпФорматыСообщений - ФорматСообщения поступившего сообщения.
//  Пакет - Строка - сериализованный объект сообщения.
// 
// Возвращаемое значение:
//  Булево  - Признак успешности обновления статуса обработчика события.
//
Функция УправлениеСостояниемФункции(ФорматСообщения, Пакет) Экспорт
	
	СтатусВозврата = Истина;
	
	Попытка
		
		xdtoСообщение = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, Пакет);
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(ФорматСообщения, xdtoСообщение.Body);
		Идентификатор = xdtoПакет.Id;
		Статус = ?(Булево(xdtoПакет.IsStarted) = истина, Перечисления.сшпСтатусыОбработчиков.Включен, Перечисления.сшпСтатусыОбработчиков.Отключен);
		
		сшпРаботаСДанными.УстановитьСтатусОбработчика(новый УникальныйИдентификатор(Идентификатор), Статус);
		
		сшпОбщегоНазначения.УстановитьНовуюВерсиюПараметровПодсистемы();
		
	Исключение
		
		ТекстОшибки = "Изменение статуса обработчика завершилось ошибкой: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "id = " + Идентификатор;
		
		сшпОбщегоНазначения.ЗарегистрироватьЗаписьВЖурнале(УровеньЖурналаРегистрации.Ошибка, "Datareon. Изменение статуса функции", ТекстОшибки); 
		
		СтатусВозврата = Ложь;
		
	КонецПопытки;
	
	Возврат СтатусВозврата;	
	
КонецФункции

// Процедура - Отправить служебный лог
// 
// Параметры:
// 	Уровень - Число - Уровень логирования
// 	Сообщение - Строка - Текст логирования
//
Процедура ОтправитьСлужебныйЛог(Уровень, Сообщение) Экспорт

	ДопСвойства = Новый Структура;
	ДопСвойства.Вставить("Level", Уровень);
	ДопСвойства.Вставить("Message", Сообщение);

	РезультатОбработки = сшпОбщегоНазначения.СформироватьСтруктуруПакета("SSM", "Esb-WebLogMessage");
	РезультатОбработки.Properties = ДопСвойства;

	сшпВзаимодействиеСАдаптером.ОтправитьСистемноеСообщениеБезОчереди(РезультатОбработки);
КонецПроцедуры
#КонецОбласти
