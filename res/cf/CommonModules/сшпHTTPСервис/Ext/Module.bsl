
#Область ПрограммныйИнтерфейс

#Если ТолстыйКлиентУправляемоеПриложение Тогда
	
#Иначе

// Функция - httpPushArrayOfMessagePUT
//
// Параметры:
//  Запрос - запрос для http-сервиса.
// 
// Возвращаемое значение:
// Строка - Ответ, форммируемый http-сервисом.
//
Функция httpPushArrayOfMessagePUT(Запрос) Экспорт
	
	httpОтвет = Новый HTTPСервисОтвет(200);
	
	Попытка
		
		форматПакета = сшпКэшируемыеФункции.ПолучитьТипСообщения(Запрос.Заголовки["Content-Type"]);
		телоПакета	 = ПолучитьТелоСообщения(Запрос, форматПакета);
		xdtoТип		 = ФабрикаXDTO.Тип("http://esb.axelot.ru", "ArrayOfMessage1C");
		ФорматТелаСообщения = ПолучитьФункциональнуюОпцию("сшпФорматСообщения");
		
		xdtoПакет = сшпОбщегоНазначения.ПолучитьОбъектXDTO(форматПакета, телоПакета, xdtoТип);
		МассивСообщений = xdtoПакет.ПолучитьСписок("Message1C");
		
		Если Не МассивСообщений = Неопределено Тогда
			
			Для  Каждого xdtoСообщение Из МассивСообщений Цикл
				
				httpОтвет.КодСостояния = сшпВзаимодействиеСАдаптером.ПолучениеСообщения(ФорматТелаСообщения, xdtoСообщение);
			
			КонецЦикла;
		
		КонецЕсли;
	
	Исключение
		
		ошибкаИнформация = ИнформацияОбОшибке();
		ошибкаПредставление 	= ПодробноеПредставлениеОшибки(ошибкаИнформация);
		httpОтвет.Причина		= КраткоеПредставлениеОшибки(ошибкаИнформация);
		httpОтвет.КодСостояния  = 500; //Неверный запрос
		httpОтвет.УстановитьТелоИзСтроки(ошибкаПредставление);
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка, , , ошибкаПредставление);
	
	КонецПопытки;
	
	Возврат httpОтвет;
	
КонецФункции

// Функция - httpPushMessageBatchPOST
//
// Параметры:
//  Запрос - запрос для http-сервиса.
// 
// Возвращаемое значение:
// Строка - Ответ, форммируемый http-сервисом.
//
Функция httpPushMessageBatchPOST(Запрос) Экспорт
	
	httpОтвет = Новый HTTPСервисОтвет(200);
	
	Попытка
		
		форматПакета			= сшпКэшируемыеФункции.ПолучитьТипСообщения(Запрос.Заголовки["Content-Type"]);
		телоПакета 				= ПолучитьТелоСообщения(Запрос, форматПакета);
		xdtoТип 				= ФабрикаXDTO.Тип("http://esb.axelot.ru", "Messages");
		xdtoПакет 				= сшпОбщегоНазначения.ПолучитьОбъектXDTO(форматПакета, телоПакета, xdtoТип);
		ФорматТелаСообщения		= ПолучитьФункциональнуюОпцию("сшпФорматСообщения");
		
		ПотокиЗаняты = Ложь;
		
		МассивСообщений = xdtoПакет.ПолучитьСписок("Message");
		
		Если Не МассивСообщений = Неопределено Тогда
			
			Для Каждого xdtoСообщение Из МассивСообщений Цикл
				
				Если Не ПотокиЗаняты ИЛИ Не сшпКэшируемыеФункции.ЭтоТранспортноеСообщение(xdtoСообщение.Type) Тогда
					
					КодОтвета = сшпВзаимодействиеСАдаптером.ПолучениеСообщения(ФорматТелаСообщения, xdtoСообщение);
					
					Если КодОтвета >= 0 Тогда
						httpОтвет.КодСостояния = КодОтвета;
					Иначе
						ПотокиЗаняты = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПотокиЗаняты Тогда
					сшпСистемныеСообщения.ОтправитьСостояниеСообщения(Строка(xdtoСообщение.Id), 6, "", 0, Неопределено);
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли;
	
	Исключение
		
		ошибкаИнформация = ИнформацияОбОшибке();
		ошибкаПредставление 	= ПодробноеПредставлениеОшибки(ошибкаИнформация);
		httpОтвет.Причина 		= КраткоеПредставлениеОшибки(ошибкаИнформация);
		httpОтвет.КодСостояния	= 500; //Неверный запрос
		httpОтвет.УстановитьТелоИзСтроки(ошибкаПредставление);
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка, , , ошибкаПредставление);
	
	КонецПопытки;
	
	Возврат httpОтвет;
	
КонецФункции

// Функция - httpPushMessageGET
//
// Параметры:
//  Запрос - запрос для http-сервиса.
// 
// Возвращаемое значение:
// Строка - Ответ, форммируемый http-сервисом. 
//
Функция httpPushMessageGET(Запрос) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Сервис работает.");
	
	Возврат Ответ;
	
КонецФункции

// Функция - httpPushMessageBatchGET
//
// Параметры:
//  Запрос - запрос для http-сервиса.
// 
// Возвращаемое значение:
// Строка - Ответ, форммируемый http-сервисом. 
//
Функция httpPushMessageBatchGET(Запрос) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Сервис работает.");
	
	Возврат Ответ;
	
КонецФункции

// Функция - httpPushMessagePOST
//
// Параметры:
//  Запрос - запрос для http-сервиса.
// 
// Возвращаемое значение:
// Строка - Ответ, форммируемый http-сервисом. 
//
Функция httpPushMessagePOST(Запрос) Экспорт
	
	httpОтвет = Новый HTTPСервисОтвет(200);
	
	Попытка
		
		форматПакета			= сшпКэшируемыеФункции.ПолучитьТипСообщения(Запрос.Заголовки["Content-Type"]);
		телоПакета 				= ПолучитьТелоСообщения(Запрос, форматПакета);
		xdtoТип 				= ФабрикаXDTO.Тип("http://esb.axelot.ru", "Message");
		xdtoПакет 				= сшпОбщегоНазначения.ПолучитьОбъектXDTO(форматПакета, телоПакета, xdtoТип);
		ФорматТелаСообщения		= ПолучитьФункциональнуюОпцию("сшпФорматСообщения");
		httpОтвет.КодСостояния	= сшпВзаимодействиеСАдаптером.ПолучениеСообщения(ФорматТелаСообщения, xdtoПакет);
	
	Исключение
		
		ошибкаИнформация = ИнформацияОбОшибке();
		ошибкаПредставление 	= ПодробноеПредставлениеОшибки(ошибкаИнформация);
		httpОтвет.Причина 		= КраткоеПредставлениеОшибки(ошибкаИнформация);
		httpОтвет.КодСостояния	= 500; //Неверный запрос
		httpОтвет.УстановитьТелоИзСтроки(ошибкаПредставление);
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка, , , ошибкаПредставление);
	
	КонецПопытки;
	
	Возврат httpОтвет;

КонецФункции

#КонецЕсли

// Функция - ОтправитьСообщение
//
// Параметры:
//  httpСоединение - текущее http cоединение. 
//  Сообщение - сообщение, которое необходимо отправить.
// 
// Возвращаемое значение:
// текРезультат - Ответ, форммируемый http-сервисом - результат отправки сообщения.
//
Функция ОтправитьСообщение(httpСоединение, Сообщение) Экспорт
	
	текРезультат = Ложь;
	
	Попытка
		
		ИмяТочкиПодключенияESB = ?(ТипЗнч(Сообщение) = Тип("Массив"), "/sendMessageBatch", "/sendMessage");
		
		httpЗапрос = сшпКэшируемыеФункции.ПолучитьHTTPЗапрос(сшпФункциональныеОпции.ИмяСервисаESB(), ИмяТочкиПодключенияESB, Перечисления.сшпФорматыСообщений.XML);
		
		xmlПакет = сшпОбщегоНазначения.СформироватьСообщениеESB_HTTP(ФабрикаXDTO, Сообщение);		
		httpЗапрос.УстановитьТелоИзСтроки(xmlПакет, "CESU-8");
		
		httpОтвет = httpСоединение.ОтправитьДляОбработки(httpЗапрос);
		
		текРезультат = httpОтвет.КодСостояния = 200;
		
		Если Не текРезультат Тогда
			
			ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка, , , "Код ошибки: " + httpОтвет.КодСостояния + ". " + httpОтвет.ПолучитьТелоКакСтроку());
		
		КонецЕсли	
	
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	КонецПопытки;
	
	Возврат текРезультат;

КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - ПолучитьТелоПакета
//
// Параметры:
//	Запрос - запрос для http сервиса
//	Формат - Перечисление.сшпФорматыСообщений - Формат сообщения
//
// Возвращаемое значение:
//	ДвоичныеДанные, Строка - Тело запроса в зависимости от формата
//
Функция ПолучитьТелоСообщения(Запрос, Формат)
	
	Возврат ?(Формат = Перечисления.сшпФорматыСообщений.FastInfoset, Запрос.ПолучитьТелоКакДвоичныеДанные(), Запрос.ПолучитьТелоКакСтроку());

КонецФункции	

#КонецОбласти