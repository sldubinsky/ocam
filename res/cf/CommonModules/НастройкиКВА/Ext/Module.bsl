#Область ПрограммныйИнтерфейс

// Возвращает сохраненные ранее параметры
// Параметры:
//  ИдентификаторНастройки - Строка - Имя предопределенного или идентификатор
//
// Возвращаемое значение:
//   ЛюбойТип - Параметры по указанному имени, которые были ранее сохранены
//
Функция ПолучитьНастройки(ИдентификаторНастройки) Экспорт
	Возврат НастройкиКВАПовтИсп.ПолучитьНастройки(ИдентификаторНастройки);
КонецФункции

// Осуществляет запись настройки в соответствующий идентификатору объект хранения
//
// Параметры:
//  ИдентификаторНастройки	 - Строка	 - Идентификатор настройки.
//  ЗначениеНастройки		 - Произвольный	 - Значение записываемой настройки
//  	Тип настройки будет определен по идентификатору. В случае несоответствия
//  	типа настройки и значения настройки будет выброшено исключение
//  ТипНастройки			 - Перечисления.ТипыНастроекКВА.Ссылка - Тип настройки, не обязателен.
//  	Если не заполнен - 1) при создании новой будет использован тип Хранилище
//  	                   2) при обновлении существующей будет использован существующий тип
//  	Если заполнен и не совпадает с существующим типом, будет выброшено исключение (нельзя менять тип)
//
Процедура ЗаписатьНастройки(ИдентификаторНастройки, ЗначениеНастройки, ТипНастройки = Неопределено) Экспорт

	ДанныеОбъекта = Справочники.НастройкиХранилищеКВА.ПолучитьДанныеОбъекта(ИдентификаторНастройки, ТипНастройки);
	Если ДанныеОбъекта.Ссылка = Неопределено ИЛИ (НЕ ЗначениеЗаполнено(ДанныеОбъекта.ТипНастройки)) Тогда
		ТекстИсключения = СтрШаблон("Не проинициализирована настройка %1, обратитесь к Администратору!",
							ИдентификаторНастройки);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	// проверим что в найденном объекте хранения ТипНастройки соответствует запрошенному
	Если ЗначениеЗаполнено(ТипНастройки) И ТипНастройки <> ДанныеОбъекта.ТипНастройки Тогда
		ТекстИсключения = СтрШаблон("Не допускается менять тип настройки! Идентификатор: %1", ИдентификаторНастройки);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	// проверим что сохраняемое значение соответствует типу настройки	
	Если НЕ ЗначениеСоответствуетТипу(ДанныеОбъекта.ТипНастройки, ЗначениеНастройки) Тогда
		ТекстИсключения = СтрШаблон("Значение не соответствует типу! Идентификатор: %1", ИдентификаторНастройки);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Справочники.НастройкиХранилищеКВА.ЗаписатьНастройку(ДанныеОбъекта.Ссылка, ЗначениеНастройки);

КонецПроцедуры // ЗаписатьНастройки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеСоответствуетТипу(ТипНастройки, ЗначениеНастройки)

	Если ТипНастройки = Перечисления.ТипыНастроекКВА.Ссылка Тогда
		Возврат ПроверитьЭтоСсылка(ЗначениеНастройки);
	ИначеЕсли ТипНастройки = Перечисления.ТипыНастроекКВА.Примитивная Тогда
		Возврат ПроверитьЭтоПримитив(ЗначениеНастройки);
	ИначеЕсли ТипНастройки = Перечисления.ТипыНастроекКВА.Массив Тогда
		Возврат ПроверитьЭтоМассив(ЗначениеНастройки);
	ИначеЕсли ТипНастройки = Перечисления.ТипыНастроекКВА.Хранилище Тогда
		Возврат Истина; // ответственность на разработчике, что именно записывать в хранилище
	Иначе
		ВызватьИсключение "Неизвестный тип настройки!";
	КонецЕсли;

КонецФункции // ПроверитьСоответствиеТипаЗначению()

Функция ПроверитьЭтоСсылка(Значение)

	ПроверяемыйТип = ТипЗнч(Значение);
	Возврат ОбщегоНазначения.ЭтоСсылка(ПроверяемыйТип);

КонецФункции // ПроверитьЭтоСсылка()

Функция ПроверитьЭтоПримитив(Значение)

	ПроверяемыйТип = ТипЗнч(Значение);
	Если ПроверяемыйТип = Тип("Строка") ИЛИ 
		 ПроверяемыйТип = Тип("Число") ИЛИ
		 ПроверяемыйТип = Тип("Булево") ИЛИ
		 ПроверяемыйТип = Тип("Дата") Тогда
		 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПроверитьЭтоПримитив()

Функция ПроверитьЭтоМассив(Значение)

	// не просто массив, а значение каждого элемента массива или ссылка или примитив
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Для Каждого ЭлементМассива Из Значение Цикл
		Если НЕ (ПроверитьЭтоСсылка(ЭлементМассива) ИЛИ ПроверитьЭтоПримитив(ЭлементМассива)) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ПроверитьЭтоМассив()

#КонецОбласти