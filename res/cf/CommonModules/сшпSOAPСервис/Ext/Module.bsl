
#Область ПрограммныйИнтерфейс

// Функция - Soap push message
//
// Параметры:
//  message - ОбъектXDTO - объект типа Message1C 
// 
// Возвращаемое значение:
//  Булево - признак успешности обработки вызова.
//
Функция soapPushMessage(message) Экспорт
	
	ФорматСообщения = ПолучитьФункциональнуюОпцию("сшпФорматСообщения");
	
	сшпВзаимодействиеСАдаптером.ПолучениеСообщения(ФорматСообщения, message);
	
	Возврат Истина;		

КонецФункции

// Функция - Soap push array of message
//
// Параметры:
//  array - ОбъектXDTO - массив объектов типа Message1C 
// 
// Возвращаемое значение:
//  Число - количество обработанных сообщений.
//
Функция soapPushArrayOfMessage(array) Экспорт
	
	КоличествоОбработанныхСообщений = 0;
	спсСообщения = array.ПолучитьСписок("Message1C");
	ФорматСообщения = ПолучитьФункциональнуюОпцию("сшпФорматСообщения");
	
	Если Не спсСообщения = Неопределено Тогда
		
		Для Каждого xdtoПакет Из спсСообщения Цикл
			
			сшпВзаимодействиеСАдаптером.ПолучениеСообщения(ФорматСообщения, xdtoПакет);
			КоличествоОбработанныхСообщений = КоличествоОбработанныхСообщений + 1;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат КоличествоОбработанныхСообщений;	

КонецФункции

// Функция - Soap push array of message
//
// Параметры:
//  Messages - ОбъектXDTO - массив объектов типа Message1C 
// 
// Возвращаемое значение:
//  Число - количество обработанных сообщений.
//
Функция soapPushMessageBatch(Messages) Экспорт
	
	КоличествоОбработанныхСообщений = 0;
	спсСообщения = Messages.ПолучитьСписок("Message");
	ПотокиЗаняты = Ложь;
	ФорматСообщения = ПолучитьФункциональнуюОпцию("сшпФорматСообщения");
	
	Если Не спсСообщения = Неопределено Тогда
		
		Для Каждого xdtoПакет Из спсСообщения Цикл
			
			Если Не ПотокиЗаняты ИЛИ Не сшпКэшируемыеФункции.ЭтоТранспортноеСообщение(xdtoПакет.Type) Тогда
				
				РезультатВыполнения = сшпВзаимодействиеСАдаптером.ПолучениеСообщения(ФорматСообщения, xdtoПакет);
				
				Если РезультатВыполнения < 0 Тогда
					
					ПотокиЗаняты = Истина;
					
				Иначе
					
					КоличествоОбработанныхСообщений = КоличествоОбработанныхСообщений + 1;
					
				КонецЕсли;				
				
			КонецЕсли;
						
			Если ПотокиЗаняты Тогда
						
				сшпСистемныеСообщения.ОтправитьСостояниеСообщения(Строка(xdtoПакет.Id), 6, "", 0, Неопределено);
				
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат КоличествоОбработанныхСообщений;	

КонецФункции

// Функция - Отправить сообщение
//
// Параметры:
//  wsПрокси - wsПрокси - коннектор на основе WS-ссылки  
//  Сообщение - Структура - структура повторяющая поля объекта Message1C  
// 
// Возвращаемое значение:
//  Булево - признак успешности обработки вызова.
//
Функция ОтправитьСообщение(wsПрокси, Сообщение) Экспорт
	
	текРезультат = Ложь;
	
	Если wsПрокси = Неопределено тогда
		
		ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Предупреждение, , , "Отсутствует связь с адаптером");
	
	Иначе	
		
		Попытка
			
			wsПроксиФабрикаXDTO = wsПрокси.ФабрикаXDTO;
			СообщениеСШП = сшпОбщегоНазначения.СформироватьСообщениеESB(wsПроксиФабрикаXDTO, Сообщение);
			
			Если ТипЗнч(Сообщение) = Тип("Массив") Тогда 
				
				wsПрокси.SendMessageBatch(СообщениеСШП);			
			
			Иначе
				
				wsПрокси.SendMessage(СообщениеСШП);			
			
			КонецЕсли;
			
			текРезультат = Истина;
		
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации("Datareon. Взаимодействие с адаптером", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			wsПрокси = Неопределено;
		
		КонецПопытки;
	
	КонецЕсли;
	
	Возврат текРезультат;

КонецФункции	

#КонецОбласти