
#Область ПрограммныйИнтерфейс

Функция ВеткиПроекта(ПроектСсылка) Экспорт

	Результат = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПроектыОсновныеВетки.ИмяВетки КАК ИмяВетки
	               |ИЗ
	               |	Справочник.Проекты.ОсновныеВетки КАК ПроектыОсновныеВетки
	               |ГДЕ
	               |	ПроектыОсновныеВетки.Ссылка = &Ссылка
	               |	И НЕ ПроектыОсновныеВетки.Шаблон
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПроектыОсновныеВетки.НомерСтроки";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ПроектСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.ИмяВетки);
	КонецЦикла;
	
	ДанныеПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроектСсылка, "КодРепозиторияГит,СобиратьТэги");
	
	МассивВеток = ИнтеграцияГитлаб.ПолучитьВеткиПроекта(ДанныеПроекта.КодРепозиторияГит);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПроектыОсновныеВетки.ИмяВетки КАК ИмяВетки
	               |ИЗ
	               |	Справочник.Проекты.ОсновныеВетки КАК ПроектыОсновныеВетки
	               |ГДЕ
	               |	ПроектыОсновныеВетки.Ссылка = &Ссылка
	               |	И ПроектыОсновныеВетки.Шаблон
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПроектыОсновныеВетки.НомерСтроки";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ПроектСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для каждого Ветка Из МассивВеток Цикл
			Если СтрПодобнаПоРегулярномуВыражению(Ветка.name, Выборка.ИмяВетки, Истина, Ложь) Тогда
				Результат.Добавить(Ветка.name);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеПроекта.СобиратьТэги Тогда
		МассивТегов = ИнтеграцияГитлаб.ПолучитьТегиПроекта(ДанныеПроекта.КодРепозиторияГит);
		Для Каждого ТегПроекта Из МассивТегов Цикл
			Результат.Добавить(ТегПроекта.name);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ВеткиПроекта()

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|  ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Возвращает истина, если контур для проекта настроен как защищенный
//
// Параметры:
//  Проект	 - СправочникСсылка.Проекты - Проверяемый проект
//  Контур	 - СправочникСсылка.Контуры - Проверяемый контур
// 
// Возвращаемое значение:
//  Булево - Истина, если проект защищен
//
Функция ЭтоЗащищенныйКонтур(Проект, Контур) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПроектыЗащищенныеКонтуры.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Справочник.Проекты.ЗащищенныеКонтуры КАК ПроектыЗащищенныеКонтуры
	               |ГДЕ
	               |	ПроектыЗащищенныеКонтуры.Ссылка = &Ссылка
	               |	И ПроектыЗащищенныеКонтуры.Контур = &Контур";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Проект);
	Запрос.УстановитьПараметр("Контур", Контур);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ЭтоЗащищенныйКонтур()

#КонецОбласти