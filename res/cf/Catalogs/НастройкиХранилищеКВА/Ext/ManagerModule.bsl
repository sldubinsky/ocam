
#Область ПрограммныйИнтерфейс

// По идентификатору настройки возвращает данные объекта хранения - ссылка, тип настройки
//
// Параметры:
//  ИдентификаторНастройки	 - Строка	 - Идентификатор настройки
//  ТипНастройки			 - Перечисления.ТипыНастроекКВА - ТипНастройки
// 
// Возвращаемое значение:
//  Структура - Структура с данными объекта, в котором хранится настройка
//   Ссылка: ссылка на элемент справочника, Неопределено если не найден
//   ТипНастройки: тип настройки, которая хранится в элементе справочника
//
Функция ПолучитьДанныеОбъекта(ИдентификаторНастройки, ТипНастройки) Экспорт

	Результат = Новый Структура("Ссылка,ТипНастройки", Неопределено, ТипНастройки);
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ИмяПредопределенного = "Справочник.НастройкиХранилищеКВА." + ИдентификаторНастройки;
		Результат.Ссылка = ПредопределенноеЗначение(ИмяПредопределенного);
		Результат.ТипНастройки = Результат.Ссылка.ТипНастройки;
		
	Исключение
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	НастройкиХранилищеКВА.Ссылка КАК Ссылка,
		               |	НастройкиХранилищеКВА.ТипНастройки КАК ТипНастройки
		               |ИЗ
		               |	Справочник.НастройкиХранилищеКВА КАК НастройкиХранилищеКВА
		               |ГДЕ
		               |	НастройкиХранилищеКВА.ИдентификаторНастройки = &ИдентификаторНастройки
		               |	И НЕ НастройкиХранилищеКВА.ПометкаУдаления";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ИдентификаторНастройки", ИдентификаторНастройки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			Возврат СоздатьОбъектХраненияНастройки(ИдентификаторНастройки, ТипНастройки);
		ИначеЕсли Выборка.Количество() > 1 Тогда
			ТекстОшибки = "Ошибка получения данных настройки, множественная запись! Идентификатор: " + ИдентификаторНастройки;
			ВызватьИсключение ТекстОшибки;
		Иначе
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // ПолучитьДанныеОбъекта()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Для внутреннего использования. Использовать НастрокиКВА.ЗаписатьНастройки
// Записывает настройки в объект.
//
// Параметры:
//  СсылкаНастройки  - СправочникСсылка.НастройкиХранилищеКВА - Ссылка на объект хранения настройки
//  ЗначениеНастройки  - Любой - Записываемое значение
//
Процедура ЗаписатьНастройку(СсылкаНастройки, ЗначениеНастройки) Экспорт

	ОбъектНастройки = СсылкаНастройки.ПолучитьОбъект();
	Если ОбъектНастройки.ТипНастройки = Перечисления.ТипыНастроекКВА.Ссылка Тогда
		ОбъектНастройки.ЗначениеНастройкиСсылка = ЗначениеНастройки;
	ИначеЕсли ОбъектНастройки.ТипНастройки = Перечисления.ТипыНастроекКВА.Примитивная Тогда
		ОбъектНастройки.ЗначениеНастройкиПримитив = ЗначениеНастройки;
	ИначеЕсли ОбъектНастройки.ТипНастройки = Перечисления.ТипыНастроекКВА.Хранилище Тогда
		ОбъектНастройки.ЗначениеНастройкиХранилище = Новый ХранилищеЗначения(ЗначениеНастройки, Новый СжатиеДанных(6));
	Иначе// Перечисления.ТипыНастроекКВА.Массив
		ОбъектНастройки.МассивЗначений.Очистить();
		Для Каждого ЭлементМассива Из ЗначениеНастройки Цикл
			НовСтрока = ОбъектНастройки.МассивЗначений.Добавить();
			НовСтрока.ЗначениеУниверсальное = ЭлементМассива;
		КонецЦикла;
	КонецЕсли;
	
	ОбъектНастройки.Записать();
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры // ЗаписатьНастройку()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") Тогда
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = ПолучитьИмяФормы(Параметры.Ключ);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьОбъектХраненияНастройки(ИдентификаторНастройки, Знач ТипНастройки)

	Если ТипНастройки = Неопределено Тогда
		ТипНастройки = Перечисления.ТипыНастроекКВА.Хранилище;
	КонецЕсли;
	
	ОбъектХраненияНастройки = Справочники.НастройкиХранилищеКВА.СоздатьЭлемент();
	ОбъектХраненияНастройки.ИдентификаторНастройки = ИдентификаторНастройки;
	ОбъектХраненияНастройки.Наименование = ИдентификаторНастройки;
	ОбъектХраненияНастройки.ТипНастройки = ТипНастройки;
	ОбъектХраненияНастройки.Записать();
	Возврат Новый Структура("Ссылка,ТипНастройки", ОбъектХраненияНастройки.Ссылка, ТипНастройки);

КонецФункции // СоздатьОбъектХраненияНастройки()

// Получает имя формы для настройки
//
// Параметры:
//  Ссылка  - СправочникСсылка.НастройкиХранилищеКВА - Ссылка на объект настроек
//
// Возвращаемое значение:
//   Строка   - Имя формы. Для предопределенного объкта возвращается имя предопределенного
//
Функция ПолучитьИмяФормы(Ссылка)
	
	Если Ссылка.Предопределенный Тогда
		Если Метаданные.Справочники.НастройкиХранилищеКВА.Формы.Найти(Ссылка.ИмяПредопределенныхДанных) = Неопределено Тогда
			Возврат "Справочник.НастройкиХранилищеКВА.Форма.Универсальная";
		Иначе
			Возврат "Справочник.НастройкиХранилищеКВА.Форма." + Ссылка.ИмяПредопределенныхДанных;
		КонецЕсли;
	Иначе
		ИмяФормы = НастройкиКВАПереопределяемый.ПолучитьИмяФормы(Ссылка);
		Если ИмяФормы = Неопределено Тогда
			Возврат "Справочник.НастройкиХранилищеКВА.Форма.Универсальная";
		Иначе
			Возврат ИмяФормы;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьИмяФормы()

#КонецОбласти