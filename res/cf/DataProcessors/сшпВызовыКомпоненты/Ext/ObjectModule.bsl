#Если Сервер Тогда

#Область ОписаниеПеременных

Перем Компонента; // Экземпляр внешней компоненты

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область СлужебныеФункции

// Процедура - инициализация контекста
//
Процедура ИнициализироватьКомпоненту() Экспорт
	
	Компонента = ПолучитьКомпоненту();
	
	Если Компонента = Неопределено Тогда
		ВызватьИсключение "Не удалось инициализировать экземпляр комопоненты";
	КонецЕсли;
	
КонецПроцедуры
	
// Функция - вызов функции компоненты
//
// Параметры:
//	ИмяФункции - Строка - имя вызываемой функции компоненты
//	dt_Параметр1 - Произвольный - параметр функции
//	dt_Параметр2 - Произвольный - параметр функции
//	dt_Параметр3 - Произвольный - параметр функции
//	dt_Параметр4 - Произвольный - параметр функции
//	dt_Параметр5 - Произвольный - параметр функции
//	dt_Параметр6 - Произвольный - параметр функции
//	dt_Параметр7 - Произвольный - параметр функции
//	dt_Параметр8 - Произвольный - параметр функции
//	dt_Параметр9 - Произвольный - параметр функции
//	dt_Параметр10 - Произвольный - параметр функции
//
// Возвращаемое значение:
//	Произвольный - Результат выполнения функции
//
// @skip-check method-too-many-params
Функция CallAsFunc(Знач ИмяФункции, dt_Параметр1 = null, dt_Параметр2 = null,
	dt_Параметр3 = null, dt_Параметр4 = null, dt_Параметр5 = null, dt_Параметр6 = null,
	dt_Параметр7 = null, dt_Параметр8 = null, dt_Параметр9 = null,
	dt_Параметр10 = null) Экспорт

	Результат = Неопределено;
	
	Если ПустаяСтрока(ИмяФункции) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка
		
		Аргументы = ПолучитьСтрокуАргументов(
			dt_Параметр1, 
			dt_Параметр2,
			dt_Параметр3, 
			dt_Параметр4, 
			dt_Параметр5, 
			dt_Параметр6,
			dt_Параметр7, 
			dt_Параметр8, 
			dt_Параметр9,
			dt_Параметр10
		);
		
		КодВызова = "Компонента." + ИмяФункции + "(" + Аргументы + ")";
		
		Если сшпКэшируемыеФункции.ЛогированиеВызововКомпоненты() Тогда
			
			ЗначениеСвойств = ПолучитьЗначениеАргументовДляЛогирования(
				dt_Параметр1, 
				dt_Параметр2,
				dt_Параметр3, 
				dt_Параметр4, 
				dt_Параметр5, 
				dt_Параметр6,
				dt_Параметр7, 
				dt_Параметр8, 
				dt_Параметр9,
				dt_Параметр10
				);
			
			ЗарегистрироватьСобытиеНачало(ИмяФункции, ЗначениеСвойств);
		
			// @skip-check server-execution-safe-mode
			Результат = Вычислить(КодВызова);
			
			ЗарегистрироватьСобытиеКонец(ИмяФункции, ЗначениеСвойств);
			
		Иначе
			
			// @skip-check server-execution-safe-mode
			Результат = Вычислить(КодВызова);
		
		КонецЕсли;
			
	Исключение
		ВызватьИсключение "При выполнении функции " + ИмяФункции + " возникла ошибка: " + ОписаниеОшибки();
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Процедура - вызов процедуры компоненты
//
// Параметры:
//	ИмяПроцедуры - Строка - имя вызываемой процедуры компоненты
//	dt_Параметр1 - Произвольный - параметр функции
//	dt_Параметр2 - Произвольный - параметр функции
//	dt_Параметр3 - Произвольный - параметр функции
//	dt_Параметр4 - Произвольный - параметр функции
//	dt_Параметр5 - Произвольный - параметр функции
//	dt_Параметр6 - Произвольный - параметр функции
//	dt_Параметр7 - Произвольный - параметр функции
//	dt_Параметр8 - Произвольный - параметр функции
//	dt_Параметр9 - Произвольный - параметр функции
//	dt_Параметр10 - Произвольный - параметр функции
//
// @skip-check method-too-many-params
Процедура CallAsProc(Знач ИмяПроцедуры, dt_Параметр1 = null, dt_Параметр2 = null,
	dt_Параметр3 = null, dt_Параметр4 = null, dt_Параметр5 = null, dt_Параметр6 = null,
	dt_Параметр7 = null, dt_Параметр8 = null, dt_Параметр9 = null,
	dt_Параметр10 = null) Экспорт

	Если ПустаяСтрока(ИмяПроцедуры) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		
		Аргументы = ПолучитьСтрокуАргументов(
			dt_Параметр1, 
			dt_Параметр2,
			dt_Параметр3, 
			dt_Параметр4, 
			dt_Параметр5, 
			dt_Параметр6,
			dt_Параметр7, 
			dt_Параметр8, 
			dt_Параметр9,
			dt_Параметр10
		);
		
		КодВызова = "Компонента." + ИмяПроцедуры + "(" + Аргументы + ");";
		
		
		Если сшпКэшируемыеФункции.ЛогированиеВызововКомпоненты() Тогда
			
			ЗначениеСвойств = ПолучитьЗначениеАргументовДляЛогирования(
				dt_Параметр1, 
				dt_Параметр2,
				dt_Параметр3, 
				dt_Параметр4, 
				dt_Параметр5, 
				dt_Параметр6,
				dt_Параметр7, 
				dt_Параметр8, 
				dt_Параметр9,
				dt_Параметр10
				);
			
			ЗарегистрироватьСобытиеНачало(ИмяПроцедуры, ЗначениеСвойств);
		
			// @skip-check server-execution-safe-mode
			Выполнить(КодВызова);
			
			ЗарегистрироватьСобытиеКонец(ИмяПроцедуры, ЗначениеСвойств);
			
		Иначе
			
			// @skip-check server-execution-safe-mode
			Выполнить(КодВызова);
		
		КонецЕсли;
			
	Исключение
		ВызватьИсключение "При выполнении процедуры " + ИмяПроцедуры + " возникла ошибка: " + ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

// Функция - получение значения свойства компоненты
//
// Параметры:
//	ИмяСвойства - Строка - имя свойства компоненты
//	
// Возвращаемое значение:
//	Произвольный - Значение свойства
//
Функция GetPropVal(Знач ИмяСвойства) Экспорт

	Результат = Неопределено;
	
	Если ПустаяСтрока(ИмяСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка
				
		КодВызова = "Компонента." + ИмяСвойства;
		
		Если сшпКэшируемыеФункции.ЛогированиеВызововКомпоненты() Тогда
			
			ЗарегистрироватьСобытиеНачало(ИмяСвойства);
		
			// @skip-check server-execution-safe-mode
			Результат = Вычислить(КодВызова);
			
			ЗарегистрироватьСобытиеКонец(ИмяСвойства);
			
		Иначе
			
			// @skip-check server-execution-safe-mode
			Результат = Вычислить(КодВызова);
		
		КонецЕсли;
			
	Исключение
		ВызватьИсключение "При получении свойства " + ИмяСвойства + " возникла ошибка: " + ОписаниеОшибки();
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция - вызов функции компоненты
//
// Параметры:
//	ИмяФункции - Строка - имя вызываемой функции компоненты
//	dt_Параметр1 - Произвольный - параметр функции
//	dt_Параметр2 - Произвольный - параметр функции
//	dt_Параметр3 - Произвольный - параметр функции
//	dt_Параметр4 - Произвольный - параметр функции
//	dt_Параметр5 - Произвольный - параметр функции
//	dt_Параметр6 - Произвольный - параметр функции
//	dt_Параметр7 - Произвольный - параметр функции
//	dt_Параметр8 - Произвольный - параметр функции
//	dt_Параметр9 - Произвольный - параметр функции
//	dt_Параметр10 - Произвольный - параметр функции
//
// Возвращаемое значение:
//	Произвольный - Результат выполнения функции
//
// @skip-check method-too-many-params
Функция ВызватьФункцию(Знач ИмяФункции, dt_Параметр1 = null, dt_Параметр2 = null,
	dt_Параметр3 = null, dt_Параметр4 = null, dt_Параметр5 = null, dt_Параметр6 = null,
	dt_Параметр7 = null, dt_Параметр8 = null, dt_Параметр9 = null,
	dt_Параметр10 = null) Экспорт
	
	Возврат CallAsFunc(
			ИмяФункции,
			dt_Параметр1, 
			dt_Параметр2,
			dt_Параметр3, 
			dt_Параметр4, 
			dt_Параметр5, 
			dt_Параметр6,
			dt_Параметр7, 
			dt_Параметр8, 
			dt_Параметр9,
			dt_Параметр10
		);
	
КонецФункции

// Процедура - вызов процедуры компоненты
//
// Параметры:
//	ИмяПроцедуры - Строка - имя вызываемой процедуры компоненты
//	dt_Параметр1 - Произвольный - параметр функции
//	dt_Параметр2 - Произвольный - параметр функции
//	dt_Параметр3 - Произвольный - параметр функции
//	dt_Параметр4 - Произвольный - параметр функции
//	dt_Параметр5 - Произвольный - параметр функции
//	dt_Параметр6 - Произвольный - параметр функции
//	dt_Параметр7 - Произвольный - параметр функции
//	dt_Параметр8 - Произвольный - параметр функции
//	dt_Параметр9 - Произвольный - параметр функции
//	dt_Параметр10 - Произвольный - параметр функции
//
// @skip-check method-too-many-params
Процедура ВызватьПроцедуру(Знач ИмяПроцедуры, dt_Параметр1 = null, dt_Параметр2 = null,
	dt_Параметр3 = null, dt_Параметр4 = null, dt_Параметр5 = null, dt_Параметр6 = null,
	dt_Параметр7 = null, dt_Параметр8 = null, dt_Параметр9 = null,
	dt_Параметр10 = null) Экспорт

	CallAsProc(
		ИмяПроцедуры,
		dt_Параметр1,
		dt_Параметр2,
		dt_Параметр3,
		dt_Параметр4,
		dt_Параметр5,
		dt_Параметр6,
		dt_Параметр7,
		dt_Параметр8,
		dt_Параметр9,
		dt_Параметр10
	);
	
КонецПроцедуры

// Функция - получение значения свойства компоненты
//
// Параметры:
//	ИмяСвойства - Строка - имя свойства компоненты
//	
// Возвращаемое значение:
//	Произвольный - Значение свойства
//
Функция ПолучитьЗначениеСвойства(Знач ИмяСвойства) Экспорт

	Возврат GetPropVal(
		ИмяСвойства
	);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПолныйПутьКомпоненты()
	
	ВерсияПлагина = сшпОбновлениеВерсииКонфигурации.ВерсияКомпоненты();

	ВремКаталог = КаталогВременныхФайлов();
	
	СистемнаяИнформация = Новый СистемнаяИнформация;

	Если СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86_64 И
		СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86 И
		СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Linux_x86_64 Тогда
		
		ЗаписьЖурналаРегистрации("Datareon.ПолучитьВнешнююКомпоненту", УровеньЖурналаРегистрации.Примечание, Метаданные.ОбщиеМодули.сшпКэшируемыеФункции, , НСтр("ru = 'Для платформы " + СистемнаяИнформация.ТипПлатформы + " использование внешней компоненты не поддерживается.'"));
	
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяФайлаСохранения = "";
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		ИмяЭлементаАрхива	 = "DatareonComponent.ESB.64." + ВерсияПлагина +".so";
		ИмяФайлаСохранения	 = ВремКаталог + ИмяЭлементаАрхива;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда	
		
		ИмяЭлементаАрхива	 = "DatareonComponent.ESB.64." + ВерсияПлагина +".dll";
		ИмяФайлаСохранения	 = ВремКаталог + ИмяЭлементаАрхива;
		
	Иначе
		
		ИмяЭлементаАрхива	 = "DatareonComponent.ESB.32." + ВерсияПлагина +".dll";
		ИмяФайлаСохранения	 = ВремКаталог + ИмяЭлементаАрхива;
		
	КонецЕсли;
	
	ФайлВК		 = Новый Файл(ИмяФайлаСохранения);
	Если НЕ ФайлВК.Существует() Тогда
		РазархивироватьКомпоненту(ИмяЭлементаАрхива, ВерсияПлагина);
	КонецЕсли;
	
	Возврат ИмяФайлаСохранения;
	
КонецФункции

// Процедура - разархивирует компоненту
//
// Параметры:
//	ИмяЭлементаАрхива - Строка - наименование элемент архива
//	ВерсияПлагина - Строка - версия внешней компоненты
//
Процедура РазархивироватьКомпоненту(ИмяЭлементаАрхива, ВерсияПлагина)
	
	ВремКаталог 	= КаталогВременныхФайлов();
	ИмяZIP 			= "DatareonComponent.ESB." + ВерсияПлагина + ".zip";
	ПолныйПутьZip 	= ВремКаталог + ИмяZIP;
	
	Макет = ПолучитьОбщийМакет("сшпКомпонента");
	Макет.Записать(ПолныйПутьZip);
	
	ЧтениеЗип = Новый ЧтениеZipФайла(ПолныйПутьZip);
	
	ЭлементФайла = ЧтениеЗип.Элементы.Найти(ИмяЭлементаАрхива);
	Если Не ЭлементФайла = Неопределено Тогда
		
		ЧтениеЗип.Извлечь(ЭлементФайла, ВремКаталог);
		
	КонецЕсли;
	
	ЧтениеЗип.Закрыть();
	
	УдалитьФайлы(ПолныйПутьZip);
	
КонецПроцедуры

// Функция - ПолучитьКомпоненту
//	Используется для Windows x64/x86 и Linux x64
//
// Параметры:
//	ИмяЭкземпляра - Строка - Имя экземпляра компоненты
//	
// Возвращаемое значение:
//  ИмяЭкземпляра - ВнешнийКомпонент
Функция ПолучитьКомпоненту(ИмяЭкземпляра = "") Экспорт
	
	Перем ВозвращаемоеЗначение;
	
	ПутьДоКомпоненты = ПолучитьПолныйПутьКомпоненты();

	Если ПутьДоКомпоненты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	РезультатПодключения = ПодключитьВнешнююКомпоненту(ПутьДоКомпоненты, "datareon", ТипВнешнейКомпоненты.Native);

	Если Не РезультатПодключения Тогда

		СистемнаяИнформация = Новый СистемнаяИнформация;

		ЗаписьЖурналаРегистрации(
				"Datareon.ПолучитьВнешнююКомпоненту", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.сшпКэшируемыеФункции, , НСтр("ru = 'Для платформы "
			+ СистемнаяИнформация.ТипПлатформы + " не удалось загрузить внешнюю компоненту.'"));

		Возврат Неопределено;

	КонецЕсли;

	ВозвращаемоеЗначение = Новый ("AddIn.datareon.AddInNativeExtension");

	Возврат ВозвращаемоеЗначение;

КонецФункции

Процедура ЗарегистрироватьСобытиеНачало(Знач Текст, Знач Аргументы = Неопределено)
	
	ТекстДляЗаписи = "Start: " + Текст;
	
	Если Аргументы <> Неопределено Тогда
		ТекстДляЗаписи = ТекстДляЗаписи + "(" + Аргументы + ")"
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(
		"Datareon.TracingComponentCalls", 
		УровеньЖурналаРегистрации.Примечание, 
		, 
		ТекущаяУниверсальнаяДатаВМиллисекундах(), 
		"Start: " + Текст + "(" + Аргументы + ")"
	);
	
КонецПроцедуры

Процедура ЗарегистрироватьСобытиеКонец(Знач Текст, Знач Аргументы = Неопределено)
	
		ТекстДляЗаписи = "End: " + Текст;
		
		Если Аргументы <> Неопределено Тогда
			ТекстДляЗаписи = ТекстДляЗаписи + "(" + Аргументы + ")"
		КонецЕсли;
	
		ЗаписьЖурналаРегистрации(
		"Datareon.TracingComponentCalls", 
		УровеньЖурналаРегистрации.Примечание, 
		, 
		ТекущаяУниверсальнаяДатаВМиллисекундах(), 
		ТекстДляЗаписи
	);
	
КонецПроцедуры

// Функция - формирует строку с аргументами для вызова функций/процедур компоненты
//
// Параметры:
//	dt_Параметр1 - Произвольный - параметр функции
//	dt_Параметр2 - Произвольный - параметр функции
//	dt_Параметр3 - Произвольный - параметр функции
//	dt_Параметр4 - Произвольный - параметр функции
//	dt_Параметр5 - Произвольный - параметр функции
//	dt_Параметр6 - Произвольный - параметр функции
//	dt_Параметр7 - Произвольный - параметр функции
//	dt_Параметр8 - Произвольный - параметр функции
//	dt_Параметр9 - Произвольный - параметр функции
//	dt_Параметр10 - Произвольный - параметр функции
//
// Возвращаемое значение:
//	Строка - аргументы для вызова 
//
// @skip-check method-too-many-params
Функция ПолучитьСтрокуАргументов(dt_Параметр1 = null, dt_Параметр2 = null,
	dt_Параметр3 = null, dt_Параметр4 = null, dt_Параметр5 = null, dt_Параметр6 = null,
	dt_Параметр7 = null, dt_Параметр8 = null, dt_Параметр9 = null,
	dt_Параметр10 = null)
	
	Результат = "";
		
	Для Индекс = 1 По 10 Цикл
       	
       	// @skip-check server-execution-safe-mode
       	Если(Вычислить("dt_Параметр" + Индекс) <> null) Тогда
       		
       		Если Не ПустаяСтрока(Результат) Тогда
       			Результат = Результат + ", ";
       		КонецЕсли;

			Результат = Результат + "dt_Параметр" + Индекс;
			
       	КонецЕсли;
       	
    КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - формирует строку с значением аргументов вызова функций/процедур компоненты для логирования
//
// Параметры:
//	dt_Параметр1 - Произвольный - параметр функции
//	dt_Параметр2 - Произвольный - параметр функции
//	dt_Параметр3 - Произвольный - параметр функции
//	dt_Параметр4 - Произвольный - параметр функции
//	dt_Параметр5 - Произвольный - параметр функции
//	dt_Параметр6 - Произвольный - параметр функции
//	dt_Параметр7 - Произвольный - параметр функции
//	dt_Параметр8 - Произвольный - параметр функции
//	dt_Параметр9 - Произвольный - параметр функции
//	dt_Параметр10 - Произвольный - параметр функции
//
// Возвращаемое значение:
//	Строка - значение аргументов строкой 
//
// @skip-check method-too-many-params
Функция ПолучитьЗначениеАргументовДляЛогирования(dt_Параметр1 = null, dt_Параметр2 = null,
	dt_Параметр3 = null, dt_Параметр4 = null, dt_Параметр5 = null, dt_Параметр6 = null,
	dt_Параметр7 = null, dt_Параметр8 = null, dt_Параметр9 = null,
	dt_Параметр10 = null)
	
	Результат = "";
		
	Для Индекс = 1 По 10 Цикл
       	
       	// @skip-check server-execution-safe-mode
       	ЗначениеАргумента = Вычислить("dt_Параметр" + Индекс);
       	Если(ЗначениеАргумента <> null) Тогда
       		
       		Попытка
       			ЗначениеАргумента = Строка(ЗначениеАргумента);
       		Исключение
       			ЗначениеАргумента = "Unknown";
       		КонецПопытки;
       		
       		Если Не ПустаяСтрока(Результат) Тогда
       			Результат = Результат + ", ";
       		КонецЕсли;

			Результат = Результат + ЗначениеАргумента;
			
       	КонецЕсли;
       	
    КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли