
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	Попытка
		ОбновитьИнформациюОПроцессеНаСервере(); 
	Исключение		
		Элементы.ОбновитьТаблицу.Доступность = Ложь;
		Элементы.ОтображатьЗавершенные.Доступность = Ложь;
 
		Элементы.ИнформацияОПроцессе.Доступность = Ложь;
		
		ЗаписьЖурналаРегистрации("сшпДиагностика.ПолучениеКомпоненты", УровеньЖурналаРегистрации.Ошибка, , ТекущаяУниверсальнаяДатаВМиллисекундах(), ОписаниеОшибки());
	КонецПопытки;
	  
	РаскраситьЗавершенныеПотокиВТЧ();
	РаскраситьУпавшиеПотокиВТЧ();
	
	ЛогированиеИзменениеКонстанты = сшпКэшируемыеФункции.ЛогированиеВызововКомпоненты();
	
	ВерсияСборки1С = сшпОбновлениеВерсииКонфигурации.ВерсияСборки1С();
	
	Если ВерсияСборки1С = "Replace_assembly_version_1C" Тогда
		ВерсияСборки1С = "Unknown";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьКомпоненту()
	
	ЭкземплярКомпоненты = Обработки.сшпВызовыКомпоненты.Создать();
	ЭкземплярКомпоненты.ИнициализироватьКомпоненту();
	
	Возврат ЭкземплярКомпоненты;
	
КонецФункции

&AtServerNoContext
function GetModeString(ModeNumber)  
	
	Mode = "Unknown";
	
	if Number(ModeNumber) = 0 then
		Mode = "Manager";
	elsif Number(ModeNumber) = 1 then
		Mode = "Service";
	elsif Number(ModeNumber) = 2 then
		Mode = "fromPlatform"; 
	elsif Number(ModeNumber) = 3 then
		Mode = "toPlatform";
	endif;	  
	
	return Mode;
	
endfunction 

&НаСервере
Процедура РаскраситьЗавершенныеПотокиВТЧ()
	
	МассивИменКолонокДляПодсветки = Новый Массив;
    Для каждого Стр из Элементы.ПотокиКомпонентыТаблица.ПодчиненныеЭлементы Цикл
        МассивИменКолонокДляПодсветки.Добавить(Стр.Имя);
    КонецЦикла;
    
    
    ЭлементОформления = УсловноеОформление.Элементы.Добавить();
    ЭлементОформления.Использование = Истина;
    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветВажного);
    
    ЭлементУсловия                = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПотокиКомпоненты.Завершен");
    ЭлементУсловия.ПравоеЗначение = Истина;
    ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   
    ЭлементУсловия.Использование  = Истина;
    
    Для каждого ТекЭлемент из МассивИменКолонокДляПодсветки Цикл
        ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
        ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекЭлемент);
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура РаскраситьУпавшиеПотокиВТЧ()
	
	МассивИменКолонокДляПодсветки = Новый Массив;
    Для каждого Стр из Элементы.ПотокиКомпонентыТаблица.ПодчиненныеЭлементы Цикл
        МассивИменКолонокДляПодсветки.Добавить(Стр.Имя);
    КонецЦикла;
    
    
    ЭлементОформления = УсловноеОформление.Элементы.Добавить();
    ЭлементОформления.Использование = Истина;
    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветОсобогоТекста);
    
    ЭлементУсловия                = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПотокиКомпоненты.Исключение");
    ЭлементУсловия.ПравоеЗначение = Истина;
    ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   
    ЭлементУсловия.Использование  = Истина;
    
    Для каждого ТекЭлемент из МассивИменКолонокДляПодсветки Цикл
        ОформляемоеПоле      = ЭлементОформления.Поля.Элементы.Добавить();
        ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекЭлемент);
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПотоковНаСервере(File = undefined)            
	
	ПотокиКомпоненты.Clear();
	
	ThreadInfo = "";
	
	if File = undefined then  
		
		ПолучениеСпискаПотоковКомпонентыПараметры = Новый Массив;
		ПолучениеСпискаПотоковКомпонентыПараметры.Добавить(ТаблицаПотоковОтображатьЗавершенные);
		
		Фз = ФоновыеЗадания.Выполнить("сшпОбщегоНазначения.ПолучениеСпискаПотоковКомпоненты", ПолучениеСпискаПотоковКомпонентыПараметры, , "ПолучениеСпискаПотоковКомпоненты");
		Фз.ОжидатьЗавершенияВыполнения();
		
		if Фз.ПолучитьСообщенияПользователю().Количество() = 1 then 
			ThreadInfo = Фз.ПолучитьСообщенияПользователю()[0];
		else
			return;		
		endif;	
		
		ThreadInfo = ThreadInfo.Текст;
	else 
				
		FileReader = New TextReader(File, TextEncoding.UTF8);
		ThreadInfo = FileReader.Read();		
		FileReader.Close();
		
	endif;    
			
	if IsBlankString(ThreadInfo) then
		return;
	endif;
	
	Strings = сшпРаботаСоСтроками._СтрРазделить(ThreadInfo, Chars.LF, false);  
	
	For Each String In Strings Do
		
		if String = "Threads information:" then
			continue;
		endif;
		
		ArrayOfStrings = сшпРаботаСоСтроками._СтрРазделить(String, "|");
		
		NewLine = ПотокиКомпоненты.Add();
		
		NewLine.PID = ArrayOfStrings[0];
		
		NewLine.Наименование = ArrayOfStrings[1];    
		
		//NewLine.Режим = GetModeString(ArrayOfStrings[2]); 
		
		NewLine.Режим = ArrayOfStrings[2];
		
		NewLine.Завершен = Boolean(Number(ArrayOfStrings[3]));			
		
		NewLine.ДатаЗапуска = XMLValue(Type("Date"), ArrayOfStrings[5]); 
		
		CompleteTime = XMLValue(Type("Date"), ArrayOfStrings[6]);
		
		if CompleteTime = Date("01.01.1970 3:00:00") or CompleteTime = Date(1, 1, 1) then 
			CompleteTime = "";  
		endif;
		
		NewLine.ДатаЗавершения = CompleteTime; 
		
		UpdateTime = XMLValue(Type("Date"), ArrayOfStrings[7]);
				
		if UpdateTime = Date("01.01.1970 3:00:00") or CompleteTime = Date(1, 1, 1) then 
			UpdateTime = "";  
		endif;                        
		
		NewLine.ДатаОбновления = UpdateTime; 
		
		NewLine.Порядок = Number(ArrayOfStrings[2]);
		
		if not Boolean(Number(ArrayOfStrings[4])) then
			
			NewLine.Завершен = true; 
			NewLine.Исключение = true;
			
		endif;
		
		NewLine.МестоОбновления = ArrayOfStrings[8];

	EndDo; 
	
	ПотокиКомпоненты.Sort("ДатаЗапуска Asc, Порядок Asc, Завершен Asc");   
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуПотоков(Команда)
	ОбновитьИнформациюОПроцессеНаСервере();
	ОбновитьТаблицуПотоковНаСервере();  
КонецПроцедуры

&НаСервере
Процедура ОтображатьЗавершенныеНаСервере(File = undefined, ПредпопределенноеЗначение = Ложь) 
	
	Если ПредпопределенноеЗначение = Ложь Тогда
	
		ТаблицаПотоковОтображатьЗавершенные = НЕ ТаблицаПотоковОтображатьЗавершенные;
		
		
		Если ТаблицаПотоковОтображатьЗавершенные Тогда
			Элементы.ОтображатьЗавершенные.ЦветРамки = Новый Цвет(144, 238, 144);
			
	        Элементы.ДатаЗавершения.Видимость = Истина;
			Элементы.Завершен.Видимость = Истина;
			Элементы.Исключение.Видимость = Истина;
		Иначе     
			Элементы.ОтображатьЗавершенные.ЦветРамки = Новый Цвет(178, 178, 178); 
			
			Элементы.ДатаЗавершения.Видимость = Ложь;
			Элементы.Завершен.Видимость = Ложь;
			Элементы.Исключение.Видимость = Ложь;
		КонецЕсли; 
		
	Иначе
		
		ТаблицаПотоковОтображатьЗавершенные = Истина;
		
		Элементы.ОтображатьЗавершенные.ЦветРамки = Новый Цвет(144, 238, 144);
			
		Элементы.ДатаЗавершения.Видимость = Истина;
		Элементы.Завершен.Видимость = Истина;
		Элементы.Исключение.Видимость = Истина;

	КонецЕсли;
	
	ОбновитьТаблицуПотоковНаСервере(File);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗавершенные(Команда)
	ОтображатьЗавершенныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПотокиИзФайлаНаСервере(ФайлВоВременномХранилище)
	
	АдресФайла = ПолучитьИмяВременногоФайла();
	
	Данные = ПолучитьИзВременногоХранилища(ФайлВоВременномХранилище);
	Данные.Записать(АдресФайла);
	
	ОтображатьЗавершенныеНаСервере(АдресФайла, Истина);
	
	УдалитьФайлы(АдресФайла);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;    
	
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;     
	
	ВыбранныеФайлы = ДиалогВыбораФайла.ВыбранныеФайлы;
	
	ФайлВоВременномХранилище = "";
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		#Если НЕ ВебКлиент Тогда
		   
		    Если НЕ ПоместитьФайл(ФайлВоВременномХранилище, ВыбранныеФайлы[0], , Ложь, ЭтаФорма.УникальныйИдентификатор) Тогда        
		        ВызватьИсключение "Ошибка при помещении файла в хранилище: " + ВыбранныеФайлы[0];
		    КонецЕсли;
	    
	    #КонецЕсли
	    
	КонецЕсли; 
	
    Если Не ПустаяСтрока(ФайлВоВременномХранилище) Тогда
    	ПотокиИзФайлаНаСервере(ФайлВоВременномХранилище);
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотокиИзФайла(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки";
	ДиалогВыбораФайла.МножественныйВыбор =  Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.Расширение = "log";
	ДиалогВыбораФайла.Фильтр = "Файлы данных с разделителями (*.log)|*.log";
	ДиалогВыбораФайла.Показать(
		Новый ОписаниеОповещения(
		"ПутьКФайлуНачалоВыбораЗавершение",
		ЭтаФорма,
		Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОПроцессеНаСервере()  
			
	Фз = ФоновыеЗадания.Выполнить("сшпОбщегоНазначения.ИнформацияОПроцессе",, ,"ИнформацияОПроцессе");
	Фз.ОжидатьЗавершенияВыполнения();

	if Фз.ПолучитьСообщенияПользователю().Количество() = 1 then 
		ИнформацияОПроцессе = Фз.ПолучитьСообщенияПользователю()[0];
	else
		return;		
	endif;	 
	
	ИнформацияОПроцессе = ИнформацияОПроцессе.Текст;
		
	SplittedString = сшпРаботаСоСтроками._СтрРазделить(ИнформацияОПроцессе, "|", true);
	
	ИмяКомпьютера = SplittedString[0];           
	ИмяПроцесса = SplittedString[2];
	PIDПроцесса = SplittedString[3]; 
	
	if StrLen(SplittedString[1]) > 0 and CharCode(Mid(SplittedString[1], StrLen(SplittedString[1]), 1)) = 0 then
		ИмяПользователя = Left(SplittedString[1], StrLen(SplittedString[1]) - 1);
	Иначе
		ИмяПользователя = SplittedString[1];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОПроцессе(Команда)
	ОбновитьИнформациюОПроцессеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЛогированиеИзменениеКонстантыПриИзмененииНаСервере()
	Константы.сшпЛогированиеВызововКомпоненты.Установить(ЛогированиеИзменениеКонстанты);
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ЛогированиеИзменениеКонстантыПриИзменении(Элемент)
	ЛогированиеИзменениеКонстантыПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти