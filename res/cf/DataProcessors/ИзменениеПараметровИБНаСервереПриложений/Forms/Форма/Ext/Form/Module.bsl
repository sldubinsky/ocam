
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ИнформационнаяБаза) Тогда
		ИнформационнаяБаза = Параметры.ИнформационнаяБаза;
		Элементы.ИнформационнаяБаза.Доступность = Ложь;
		Заголовок = "Управление: " + ИнформационнаяБаза;
		ИнициализироватьЗакладкуАвтоматизация();
	Иначе
		Заголовок = "Управление базой 1С";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьУдаленияСеансов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	РезультатОперации = "";
	ИнициализироватьЗакладкуАвтоматизация();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте	
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформацию(Команда)
	ПолучитьИнформациюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРегламентныеЗадания(Команда)
	ПереключитьРегламентныеЗаданияНаСервере(Истина);
	РезультатОперации = "Регламентные задания выключены ! " + Символы.ПС + ПолучитьИнформациюОбИБ();
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьБлокировкуСоединения(Команда)
	ВыключитьБлокировкуСоединенияНаСервере();
	РезультатОперации = "Блокировка соединения выключена ! " + Символы.ПС + ПолучитьИнформациюОбИБ();
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРегламентныеЗадания(Команда)
	ПереключитьРегламентныеЗаданияНаСервере(Ложь);
	РезультатОперации = "Включены регламентные задания ! " + Символы.ПС + ПолучитьИнформациюОбИБ();
КонецПроцедуры

&НаКлиенте
Процедура ВключитьБлокировкуСоединения(Команда)
	ВключитьБлокировкуСоединенияНаСервере();
	РезультатОперации = "Включена блокировка соединения ! " + Символы.ПС + ПолучитьИнформациюОбИБ();
КонецПроцедуры

&НаКлиенте
АСИНХ Процедура УдалитьНаСервереПриложений(Команда)
	
	КнопкиВопроса = Новый СписокЗначений();
	КнопкиВопроса.Добавить(0, "Удалить");
	КнопкиВопроса.Добавить(1, "Не удалять");
	КнопкиВопроса.Добавить(2, "Очистить");
	
	РезультатВыбора = ЖДАТЬ ВопросАсинх("Выберите режим обработки базы данных", КнопкиВопроса, 60, 0, , 0);

	Если РезультатВыбора = КодВозвратаДиалога.Таймаут Тогда
		РезультатВыбора = 0;
	КонецЕсли;
	
	УдалитьНаСервереПриложенийНаСервере(РезультатВыбора);
	РезультатОперации = "Информационная база удалена! ";
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСеансыСоединения(Команда)
	
	ПолучитьСеансыСоединенияНаСервере();
	
	ВсеСтрочки = ДеревоКоннектов.ПолучитьЭлементы();
	Для каждого Строчка Из ВсеСтрочки Цикл
		ИДС = Строчка.ПолучитьИдентификатор();
		Элементы.ДеревоКоннектов.Развернуть(ИДС);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСеансСоединение(Команда)
	МассивВыделенныхСтрок = Команда.ИспользуемаяТаблица.ВыделенныеСтроки;
	МассивУдаляемых = Новый Массив;
	Для каждого Строчка Из МассивВыделенныхСтрок Цикл
		ИскомаяСтрока = ДеревоКоннектов.НайтиПоИдентификатору(Строчка);
		Если ЗначениеЗаполнено(ИскомаяСтрока.Номер) Тогда
			МассивУдаляемых.Добавить(Строчка);
		КонецЕсли;
	КонецЦикла;
	Если МассивУдаляемых.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("УдалитьСеансыСоединенияПослеВопроса", ЭтотОбъект, МассивУдаляемых);
	ПоказатьВопрос(Оповещение, "Вы действительно хотите аварийно заверщить выбранные сеансы/соединения?
								|(" + МассивУдаляемых.Количество() + ")", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьУдалениеСеансов(Команда)
	Элементы.Активировать.Пометка = Не Элементы.Активировать.Пометка;
	УстановитьДоступностьУдаленияСеансов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьЗакладкуАвтоматизация()
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИнформационнаяБаза, "Проект,Контур");
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Проект) Тогда
		Если РазрешеноУправлениеБазой(ЗначенияРеквизитов.Проект, ЗначенияРеквизитов.Контур) Тогда
			ЭтотОбъект.Элементы.ГруппаАвтоматизация.Видимость = Истина;
			ЗаполнитьВеткиСборки(ЗначенияРеквизитов.Проект);
			ЗаполнитьКодыТелеграм(ЗначенияРеквизитов.Проект);
		Иначе
			ЭтотОбъект.Элементы.ГруппаАвтоматизация.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция РазрешеноУправлениеБазой(Проект, Контур)

	Если НЕ Справочники.Проекты.ЭтоЗащищенныйКонтур(Проект, Контур) Тогда
		Возврат Истина;
	ИначеЕсли (Пользователи.ЭтоПолноправныйПользователь()
			  ИЛИ Пользователи.РолиДоступны("УправлениеЗащищеннымиКонтурами")) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // РазрешеноУправлениеБазой()

&НаСервере
Функция ПолучитьИнформациюОбИБ()
	
	ПараметрыАдминистрирования = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ИнформационнаяБаза.СерверПриложений);
	ПараметрыИБ = Справочники.ИнформационныеБазы1С.ПолучитьПараметрыИБ(ИнформационнаяБаза); 
	СвойстваИБ = АдминистрированиеКластераRAS.СвойстваИнформационнойБазы(ПараметрыАдминистрирования, ПараметрыИБ, );
	Сообщение = Новый СообщениеПользователю;
	
	Для Каждого Элемент Из СвойстваИБ  Цикл
		Сообщение.Текст = Сообщение.Текст + ?(НЕ ПустаяСтрока(Сообщение.Текст), Символы.ПС, "");
		Сообщение.Текст = Сообщение.Текст + Элемент.Ключ + " = " + Элемент.Значение;
	КонецЦикла;
	
	Возврат Сообщение.Текст;
	
КонецФункции

&НаСервере
Процедура ПолучитьИнформациюНаСервере()
	РезультатОперации = ПолучитьИнформациюОбИБ();
КонецПроцедуры

&НаСервере
Процедура ПереключитьРегламентныеЗаданияНаСервере(РежимПереключения)
	
	//Параметры администрирования кластера
	ПараметрыАдминистрирования = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ИнформационнаяБаза.СерверПриложений);
	
	//Параметры администрирования ИБ
	ПараметрыИБ = Справочники.ИнформационныеБазы1С.ПолучитьПараметрыИБ(ИнформационнаяБаза);
	
	АдминистрированиеКластера.УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрирования, ПараметрыИБ, РежимПереключения);
КонецПроцедуры

&НаСервере
Процедура ВключитьБлокировкуСоединенияНаСервере()
	
	//Параметры администрирования кластера
	ПараметрыАдминистрирования = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ИнформационнаяБаза.СерверПриложений);
	
	//Параметры администрирования ИБ
	ПараметрыИБ = Справочники.ИнформационныеБазы1С.ПолучитьПараметрыИБ(ИнформационнаяБаза); 
	
	//Свойства блокировки сеансов
	СвойстваБлокировки = АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий();
	СвойстваБлокировки.БлокировкаСеансов = Истина;
	СвойстваБлокировки.ДатаС = ТекущаяДата();
	СвойстваБлокировки.КодРазрешения = 1111;
	
	АдминистрированиеКластера.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(ПараметрыАдминистрирования, ПараметрыИБ, СвойстваБлокировки);
КонецПроцедуры

&НаСервере
Процедура ВыключитьБлокировкуСоединенияНаСервере()
	
	//Параметры администрирования кластера
	ПараметрыАдминистрирования = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ИнформационнаяБаза.СерверПриложений);
	
	//Параметры администрирования ИБ
	ПараметрыИБ = Справочники.ИнформационныеБазы1С.ПолучитьПараметрыИБ(ИнформационнаяБаза); 
	
	//Свойства блокировки сеансов
	СвойстваБлокировки = АдминистрированиеКластера.СвойстваБлокировкиСеансовИРегламентныхЗаданий();
	СвойстваБлокировки.БлокировкаСеансов = Ложь;
	СвойстваБлокировки.ДатаС = ТекущаяДата();
	
	АдминистрированиеКластера.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(ПараметрыАдминистрирования, ПараметрыИБ, СвойстваБлокировки);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНаСервереПриложений(Команда)
	ЗарегистрироватьНаСервереПриложенийНаСервере();
	РезультатОперации = "Информационная база зарегистрирована! " + Символы.ПС + ПолучитьИнформациюОбИБ();
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьНаСервереПриложенийНаСервере() Экспорт
	
	ДанныеСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ИнформационнаяБаза,
		"Наименование,СерверПриложений,СерверБазДанных");
		
	//Параметры администрирования кластера
	ПараметрыСервераПриложений = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ДанныеСсылки.СерверПриложений);
	ПараметрыСервераБД = Справочники.СерверыБазДанных.ПолучитьПараметрыСервера(ДанныеСсылки.СерверБазДанных);
	
	ПараметрыИБ = АдминистрированиеКластера.ПараметрыНовойИнформационнойБазы();
	ПараметрыИБ.Имя = ДанныеСсылки.Наименование;
	ПараметрыИБ.ИмяБазыНаСервере = ИнформационнаяБаза.Наименование;
	ПараметрыИБ.ТипСервераБД = ПараметрыСервераБД.ТипСервера;
	ПараметрыИБ.ИмяСервераБД = ПараметрыСервераБД.ИмяСервера;
	Если НЕ ЗначениеЗаполнено(ПараметрыСервераБД.АдминистраторБД) Тогда
		ПараметрыИБ.Удалить("ПользовательБД");
		ПараметрыИБ.Удалить("ПарольБД");
	Иначе
		ПараметрыИБ.ПользовательБД = ПараметрыСервераБД.АдминистраторБД;
		ПараметрыИБ.ПарольБД = ПараметрыСервераБД.ПарольБД;
	КонецЕсли;
	Если ПараметрыИБ.ТипСервераБД = "PostgreSQL" Тогда
		ПараметрыИБ.СмещениеДат = "0";
	КонецЕсли;
	
	СозданнаяБаза = АдминистрированиеКластераRAS.СоздатьИнформационнуюБазу(
		ИнформационнаяБаза.СерверПриложений.ИДКластера,
		ПараметрыСервераПриложений,
		ПараметрыИБ);
		
	ИБ_объект = ИнформационнаяБаза.ПолучитьОбъект();
	ИБ_объект.ИД_ИнформационнойБазы = СозданнаяБаза.Получить("infobase");
	ИБ_объект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервереПриложенийНаСервере(Режим) Экспорт
	//Параметры администрирования кластера
	ПараметрыАдминистрирования = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ИнформационнаяБаза.СерверПриложений);
	
	//Параметры администрирования ИБ
	ПараметрыИБ = Справочники.ИнформационныеБазы1С.ПолучитьПараметрыИБ(ИнформационнаяБаза); 
	
	АдминистрированиеКластераRAS.УдалитьИнформационнуюБазу(
		ИнформационнаяБаза.СерверПриложений.ИДКластера,
		ПараметрыАдминистрирования,
		ПараметрыИБ,
		Режим);
		
	ИБ_объект = ИнформационнаяБаза.ПолучитьОбъект();
	ИБ_объект.ИД_ИнформационнойБазы = "";
	ИБ_объект.Записать();
КонецПроцедуры

&НаСервере
Процедура ПолучитьСеансыСоединенияНаСервере()
	
	ПарСервера = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ИнформационнаяБаза.СерверПриложений);
	ПарИБ = Справочники.ИнформационныеБазы1С.ПолучитьПараметрыИБ(ИнформационнаяБаза); 
	ВсеСеансы = АдминистрированиеКластера.СеансыИнформационнойБазы(ПарСервера, ПарИБ);
	ВсеСоединения = АдминистрированиеКластера.СоединенияСИнформационнойБазой(ПарСервера, ПарИБ);
	
	ОписаниеПриложений = ОписаниеКлиентскихПриложений();
	
	ДО = РеквизитФормыВЗначение("ДеревоКоннектов");
	ДО.Строки.Очистить();
	
	КореньСеансов = ДО.Строки.Добавить();
	КореньСеансов.ОписаниеТипа = "Сеансы";
	КореньСоединений = ДО.Строки.Добавить();
	КореньСоединений.ОписаниеТипа = "Соединения";
	
	Для каждого СтрокаМассива Из ВсеСеансы Цикл
		НС = КореньСеансов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрокаМассива);
		НС.Начало = СтрокаМассива.МоментСозданияСеанса;
		НС.ИдентификаторКлиентскогоПриложения = 
			ПолучитьОписаниеКлиента(СтрокаМассива.ИдентификаторКлиентскогоПриложения, ОписаниеПриложений);
		НС.Тип = "Сеанс";
	КонецЦикла;
	
	Для каждого СтрокаМассива Из ВсеСоединения Цикл
		НС = КореньСоединений.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрокаМассива);
		НС.Начало = СтрокаМассива.МоментУстановкиСоединения;
		НС.ИдентификаторКлиентскогоПриложения = 
			ПолучитьОписаниеКлиента(СтрокаМассива.ИдентификаторКлиентскогоПриложения, ОписаниеПриложений);
		НС.Тип = "Соединение";
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДО, "ДеревоКоннектов");
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКлиентскихПриложений()
	Результат = Новый Соответствие;
	Результат.Вставить("1CV8", "ТОЛСТЫЙ клиент (1CV8)");
	Результат.Вставить("1CV8C", "Тонкий клиент (1CV8C)");
	Результат.Вставить("WebClient", "Веб-клиент (WebClient)");
	Результат.Вставить("Designer", "Конфигуратор (Designer)");
	Результат.Вставить("COMConnection", "1С:Предприятия через COM (COMConnection)");
	Результат.Вставить("WSConnection", "Web-сервис (WSConnection)");
	Результат.Вставить("BackgroundJob", "Фоновое задание (BackgroundJob)");
	Результат.Вставить("WebServerExtension", "Веб-сервер (WebServerExtension)");
	Результат.Вставить("RAS", "Сеанс администрирования (RAS)");
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьОписаниеКлиента(КодКлиента, СоответствиеНазваний)
	Результат = СоответствиеНазваний.Получить(КодКлиента);
	Если Результат = Неопределено Тогда
		Результат = КодКлиента;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УдалитьСеансыСоединенияПослеВопроса(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьСеансыСоединенияНаСервере(ДопПараметры);
		ПолучитьСеансыСоединения(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьСеансыСоединенияНаСервере(МассивСтрок)
	
	//Параметры администрирования кластера
	ПарамСерв = Справочники.СерверыПриложений1С.ПолучитьПараметрыСервера(ИнформационнаяБаза.СерверПриложений);
	
	//Параметры администрирования ИБ
	ПарамИБ = Справочники.ИнформационныеБазы1С.ПолучитьПараметрыИБ(ИнформационнаяБаза); 
	
	ФильтрСеансов = Новый Массив;
	ФильтрСоединений = Новый Массив;
	Для каждого ИндексСтроки Из МассивСтрок Цикл
		ИскомаяСтрока = ЭтотОбъект.ДеревоКоннектов.НайтиПоИдентификатору(ИндексСтроки);
		Если ИскомаяСтрока.Тип = "Сеанс" Тогда
			Отбор = АдминистрированиеКластера.ФильтрСеансов();
			Отбор.Свойство = "Номер";
			Отбор.Значение = ИскомаяСтрока.Номер;
			ФильтрСеансов.Добавить(Отбор);
		ИначеЕсли ИскомаяСтрока.Тип = "Соединение" Тогда
			Отбор = АдминистрированиеКластера.ФильтрСоединений();
			Отбор.Свойство = "Номер";
			Отбор.Значение = ИскомаяСтрока.Номер;
			ФильтрСоединений.Добавить(Отбор);
		КонецЕсли;
	КонецЦикла;
	Если ФильтрСеансов.Количество() <> 0 Тогда
		АдминистрированиеКластера.УдалитьСеансыИнформационнойБазы(ПарамСерв, ПарамИБ, ФильтрСеансов);
	КонецЕсли;
	Если ФильтрСоединений.Количество() <> 0 Тогда
		АдминистрированиеКластера.РазорватьСоединенияСИнформационнойБазой(ПарамСерв, ПарамИБ, ФильтрСоединений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьУдаленияСеансов()
	Элементы.ГруппаУдалитьСеансСоединение.Видимость = Элементы.Активировать.Пометка;
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеФайлаНаСервере()
	ФайлИнфо = Новый Файл(ПутьКФайлуКонфигурации);
	Если НЕ ФайлИнфо.Существует() Тогда
		ОбщегоНазначения.СообщитьПользователю("Файл не существует (или не виден с сервера 1С)", , "ПутьКФайлуКонфигурации");
	Иначе
		ОбщегоНазначения.СообщитьПользователю("ОК!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайла(Команда)
	ПроверитьНаличиеФайлаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбновленияПриИзменении(Элемент)
	УстановитьВидимостьНастроекОбновления();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНастроекОбновления()

	Если ВариантОбновления = 1 Тогда
		Элементы.ГруппаПараметры1.Видимость = Истина;
		Элементы.ГруппаПараметры2.Видимость = Ложь;
		Элементы.ГруппаПараметры3.Видимость = Ложь;
	ИначеЕсли ВариантОбновления = 2 Тогда
		Элементы.ГруппаПараметры1.Видимость = Ложь;
		Элементы.ГруппаПараметры2.Видимость = Истина;
		Элементы.ГруппаПараметры3.Видимость = Ложь;
	ИначеЕсли ВариантОбновления = 3 Тогда
		Элементы.ГруппаПараметры1.Видимость = Ложь;
		Элементы.ГруппаПараметры2.Видимость = Ложь;
		Элементы.ГруппаПараметры3.Видимость = Истина;
	Иначе
		Элементы.ГруппаПараметры1.Видимость = Ложь;
		Элементы.ГруппаПараметры2.Видимость = Ложь;
		Элементы.ГруппаПараметры3.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВеткиСборки(ПроектСсылка)

	Попытка
		МассивВеток = Справочники.Проекты.ВеткиПроекта(ПроектСсылка);
	Исключение
		Элементы.ГруппаАвтоматизация.Видимость = Ложь;
		Возврат;
	КонецПопытки;
	Элементы.ВеткиСборки.СписокВыбора.ЗагрузитьЗначения(МассивВеток);
	ВеткиСборки = МассивВеток[0];

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодыТелеграм(ПроектСсылка)

	ТекстЗапроса = "ВЫБРАТЬ
	               |	""Личный"" КАК Представление,
	               |	Пользователи.КодПользователяТГ КАК КодТелеграм
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Ссылка = &Пользователь
	               |	И Пользователи.КодПользователяТГ <> """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПроектыКодыТелеграмм.ИмяКанала,
	               |	ПроектыКодыТелеграмм.КодТелеграм
	               |ИЗ
	               |	Справочник.Проекты.КодыТелеграмм КАК ПроектыКодыТелеграмм
	               |ГДЕ
	               |	ПроектыКодыТелеграмм.Ссылка = &Проект";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", ПроектСсылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Элементы.ГруппаОповещатьТг.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Элементы.КодТелеграмЧата.СписокВыбора.Очистить();
	Пока Выборка.Следующий() Цикл
		Элементы.КодТелеграмЧата.СписокВыбора.Добавить(Выборка.КодТелеграм, Выборка.Представление);
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПриИзменении(Элемент)
	Элементы.ГруппаПараметрыОбновления.Видимость = Обновить;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЭталонаПриИзменении(Элемент)
	Элементы.Эталон.Доступность = ЗагрузитьИзЭталона;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПайплайн(Команда)
	ЗапуститьПайплайнНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПайплайнНаСервере()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ИнформационныеБазы1С.Наименование КАК ИнформационнаяБаза,
	               |	ИнформационныеБазы1С1.Наименование КАК Эталон,
	               |	Проекты.Ссылка КАК Проект,
	               |	Проекты.КодРепозиторияГит КАК КодПроекта,
	               |	СерверыБазДанных.Наименование КАК СерверыБазДанных,
	               |	СерверыПриложений1С.Наименование КАК СерверыПриложений1С,
	               |	СерверыПриложений1С.ПортКластера КАК ПортКластера,
	               |	СерверыПриложений1С.ПортСервераАдминистрирования КАК ПортСервераАдминистрирования
	               |ИЗ
	               |	Справочник.ИнформационныеБазы1С КАК ИнформационныеБазы1С
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерверыПриложений1С КАК СерверыПриложений1С
	               |		ПО ИнформационныеБазы1С.СерверПриложений = СерверыПриложений1С.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерверыБазДанных КАК СерверыБазДанных
	               |		ПО ИнформационныеБазы1С.СерверБазДанных = СерверыБазДанных.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеБазы1С КАК ИнформационныеБазы1С1
	               |		ПО (ИнформационныеБазы1С1.Ссылка = &Эталон)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	               |		ПО ИнформационныеБазы1С.Проект = Проекты.Ссылка
	               |ГДЕ
	               |	ИнформационныеБазы1С.Ссылка = &Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ИнформационнаяБаза);
	Запрос.УстановитьПараметр("Эталон", Эталон);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Нет данных для запуска пайплайна");
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Проект) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнен проект");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Выборка.КодПроекта) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнен код проект");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("baseName", Выборка.ИнформационнаяБаза);
	СтруктураПараметров.Вставить("srv1C", Выборка.СерверыПриложений1С);
	СтруктураПараметров.Вставить("srv1C_clust_port", Формат(Выборка.ПортКластера,"ЧДЦ=0; ЧГ=0"));
	СтруктураПараметров.Вставить("srv1C_ras_port", Формат(Выборка.ПортСервераАдминистрирования,"ЧДЦ=0; ЧГ=0"));
	СтруктураПараметров.Вставить("srvDB", Выборка.СерверыБазДанных);
	
	Если БэкапБД Тогда
		СтруктураПараметров.Вставить("BACKUP", "1");
	КонецЕсли;
	
	Если ЗагрузитьИзЭталона Тогда
		СтруктураПараметров.Вставить("ETALON", "1");
		СтруктураПараметров.Вставить("etalonName", Выборка.Эталон);
	КонецЕсли;
	
	Если Обновить Тогда
		СтруктураПараметров.Вставить("UPDATE", "1");
		Если ВариантОбновления = 1 Тогда
			// Сборка в актуальном времени
			СтруктураПараметров.Вставить("CREATECF", "1");
		ИначеЕсли ВариантОбновления = 2 Тогда
			// Берем тот cf, который собран по указанной ветке. Параметров нет
		ИначеЕсли ВариантОбновления = 3 Тогда
			СтруктураПараметров.Вставить("netcf", ПутьКФайлуКонфигурации);
		Иначе
			// не выбрали, отказываемся запускать? Пока запускаем по режиму 2
		КонецЕсли;
	КонецЕсли;
	
	Если Оповещать Тогда
		СтруктураПараметров.Вставить("sendNotifications", "true");
		СтруктураПараметров.Вставить("tgchat_id", КодТелеграмЧата);
	КонецЕсли;
	
	Результат = ИнтеграцияГитлаб.ЗапуститьПайплайн(Выборка.КодПроекта, ВеткиСборки, СтруктураПараметров);
	Элементы.ДекорацияСсылкаПайплайн.Заголовок = Результат.web_url;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаПайплайнНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Элементы.ДекорацияСсылкаПайплайн.Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ОповещатьПриИзменении(Элемент)
	Элементы.КодТелеграмЧата.Доступность = Оповещать;
КонецПроцедуры

&НаКлиенте
Процедура ЭталонНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("СерверБазДанных", ПолучитьСерверБД());

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.ИнформационныеБазы1С.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСерверБД()

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнформационнаяБаза, "СерверБазДанных");

КонецФункции // ПолучитьСерверБД()

#КонецОбласти
