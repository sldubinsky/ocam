
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПроверкаВерсииСовместимости();
	
	ВерсияКонфигурации = сшпОбновлениеВерсииКонфигурации.ВерсияКонфигурации(); 
	
	Компонента = Обработки.сшпВызовыКомпоненты.Создать();
	Компонента.ИнициализироватьКомпоненту();
	ВерсияКомпоненты = Компонента.GetPropVal("ComponentVersion");
	
	Если ВерсияКомпоненты <> сшпОбновлениеВерсииКонфигурации.ВерсияКомпоненты() Тогда
		
		ВызватьИсключение "Версия подключаемой компоненты не соответствует версии указаной в конфигурации.";
	
	КонецЕсли;
	
	Если сшпОбновлениеВерсииКонфигурации.ВыполнитьОбновлениеДанныхКонфигурации() Тогда
		 
		ОбновитьНаСервере();
		
	Иначе
		
		ПрочитатьТаблицуДлительностиХранения();
		ПрочитатьАдресаМенеджеровУзлов();
		ПрочитатьТаблицуКластер1С();
		Если ТаблицаСерверовКластера1С.Количество() > 1 Тогда
			ПереключательКластера = 0;
		Иначе
			ПереключательКластера = 1;
		КонецЕсли;	
		УправлениеВидимостью();
		УстновитьТекущееСостояниеПроцессовОбработки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолеПереключателяКластерПриИзменении(Неопределено);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдресаМенеджеровУзловПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Адрес) Или
				Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Порт) Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Адрес и порт обязательны для заполнения.";
			Сообщение.Сообщить();
			
			Возврат;
		КонецЕсли;
		
		Совпадений = 0;
		Для Каждого СтрокаАдреса Из АдресаМенеджеровУзлов Цикл
			Если НРег(СтрокаАдреса.Адрес) = НРег(Элемент.ТекущиеДанные.Адрес) Тогда
				Совпадений = Совпадений + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Совпадений > 1 Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Этот адрес уже есть в настройках.";
			Сообщение.Сообщить();
			
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.ДобавленоВручную = Истина;
		
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Адрес = ВРег(Элемент.ТекущиеДанные.Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаМенеджеровУзловПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СохранитьАдресаМенеджеровУзлов();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаМенеджеровУзловПослеУдаления(Элемент)
	
	СохранитьАдресаМенеджеровУзлов();
	УправлениеВидимостью();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьАдресаМенеджеровУзлов()
	
	АдресаNM = сшпОбщегоНазначения.ПолучитьАдресаМенеджеровУзлов();
	ЗначениеВРеквизитФормы(АдресаNM.Адреса, "АдресаМенеджеровУзлов");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьАдресаМенеджеровУзлов()
	
	Адреса = РеквизитФормыВЗначение("АдресаМенеджеровУзлов");
	
	Для Каждого ТекущаяСтрока из Адреса Цикл
		ТекущаяСтрока.Порт = СокрЛП(ТекущаяСтрока.Порт);		
	КонецЦикла;	
	
	// Сохранение адресов выполняется без контроля версии, у пользовательских изменений приоритет.
	сшпОбщегоНазначения.СохранитьАдресаМенеджеровУзлов(Адреса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСервера1с()
	Если ТаблицаСерверовКластера1С.Количество() = 1 Тогда
		АдресСервера1С = ТаблицаСерверовКластера1С[0].Адрес;
		ПортСервера1С = ТаблицаСерверовКластера1С[0].Порт;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСерверовКластера1СПриИзменении(Элемент)
	
	ЗаписатьЗначениеСпискаКластера1С();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеСпискаКластера1С()
	
		ТаблицаСервер1с = сшпРаботаСКонстантами.ПолучитьСервер1С();
		ТаблицаСервер1с.Очистить();

		Для Каждого СтрокаТаблицы Из ТаблицаСерверовКластера1С Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Адрес) Тогда
				НоваяСтрока = ТаблицаСервер1с.Добавить();
				НоваяСтрока.Адрес = СтрокаТаблицы.Адрес;
				НоваяСтрока.Порт = СтрокаТаблицы.Порт;				
			КонецЕсли;
		КонецЦикла;

		ИмяКонстанты = "сшпСервер1С";

		Константы[ИмяКонстанты].Установить(Новый ХранилищеЗначения(ТаблицаСервер1с));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПереключателяКластерПриИзменении(Элемент)
	
	ПрочитатьТаблицуКластер1С();
	
	Если ПереключательКластера = 0 Тогда
		Элементы.ГруппаКластер1С.Видимость = Истина;
		Элементы.ГруппаСервер1С.Видимость = Ложь;		
	ИначеЕсли ПереключательКластера = 1 Тогда
		Если ТаблицаСерверовКластера1С.Количество() <= 1 Тогда
			Элементы.ГруппаКластер1С.Видимость = Ложь;
			Элементы.ГруппаСервер1С.Видимость = Истина;
			ЗаполнитьПоляСервера1с();
		Иначе
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Нельзя переключить на сервер 1С пока в списке более 1 записи!";
			Сообщение.Сообщить();
			ПереключательКластера = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьТаблицуКластер1С()
	
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаСерверовКластера1С");
	 
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из РеквизитыФормы Цикл
		 
		МассивУдаляемыхРеквизитов.Добавить(Колонка.Имя);
		
	КонецЦикла;  
	
	ТЗКонстанта = сшпРаботаСКонстантами.ПолучитьСервер1С();
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТЗКонстанта.Колонки Цикл
		 
		ИндексНайденного = МассивУдаляемыхРеквизитов.Найти(Колонка.Имя);
		
		Если ИндексНайденного = Неопределено Тогда
			 
			НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения), "ТаблицаСерверовКластера1С", Колонка.Заголовок);
			МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			
		Иначе
			
			МассивУдаляемыхРеквизитов.Удалить(ИндексНайденного);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаСерверовКластера1С");
	ТаблицаСерверовКластера1С.Загрузить(ТЗКонстанта);
	
	Для Каждого Колонка Из МассивДобавляемыхРеквизитов Цикл
		 
		Элемент = Элементы.Добавить("ТаблицаСерверовКластера1С" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаСерверовКластера1С);
		Элемент.ПутьКДанным = "ТаблицаСерверовКластера1С." + Колонка.Имя;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		
	КонецЦикла;	
			
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТаблицуДлительностиХранения()
	
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаДлительностиХранения");
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из РеквизитыФормы Цикл
		 
		МассивУдаляемыхРеквизитов.Добавить(Колонка.Имя);
		
	КонецЦикла;   

	ТЗКонстанта = сшпРаботаСКонстантами.ПолучитьДлительностьХранения();
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТЗКонстанта.Колонки Цикл
		 
		ИндексНайденного = МассивУдаляемыхРеквизитов.Найти(Колонка.Имя);
		
		Если ИндексНайденного = Неопределено Тогда
			 
			НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения), "ТаблицаДлительностиХранения", Колонка.Заголовок);
			МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			
		Иначе
			
			МассивУдаляемыхРеквизитов.Удалить(ИндексНайденного);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаДлительностиХранения");
	ТаблицаДлительностиХранения.Загрузить(ТЗКонстанта);
	
	Для Каждого Колонка Из МассивДобавляемыхРеквизитов Цикл
		 
		Элемент = Элементы.Добавить("ТаблицаДлительностиХранения" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаДлительностиХранения);
		Элемент.ПутьКДанным = "ТаблицаДлительностиХранения." + Колонка.Имя;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		
	КонецЦикла;
	   
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	
	НомерВерсии = Формат(сшпКэшируемыеФункции.ВерсияПодсистемы(), "ЧГ=0");
	
	Если НомерВерсии = "10000" Тогда
				
		Элементы.сшпИспользоватьСШП.Заголовок = "Использовать подсистему Datareon";
	
	Иначе
		
		Элементы.сшпИспользоватьСШП.Заголовок = "Использовать  подсистему Datareon (версия подсистемы " + Формат(НомерВерсии, "ЧГ=0") + ")";
	
	КонецЕсли;
	
	ТипКоннектораВебСервисы = сшпРаботаСКонстантами.ТипКоннектораВебСервисы();
	
	Элементы.сшпАвтоматическийСтартОбработчиков.Видимость	 = ТипКоннектораВебСервисы;
	Элементы.сшпДлительностьОжидания.Видимость				 = ТипКоннектораВебСервисы;
	Элементы.ГруппаТочкиПодключения.Видимость				 = ТипКоннектораВебСервисы;
	Элементы.ГруппаТекущееСостояние.Видимость				 = НаборКонстант.сшпИспользоватьСШП И Не ТипКоннектораВебСервисы;
	Элементы.ГруппаТочкиПодключенияPipe.Видимость			 = Не ТипКоннектораВебСервисы И НаборКонстант.сшпТипИспользуемогоКоннектораESB = Перечисления.сшпТипыКоннекторовESB.Pipe;
	Элементы.ГруппаТочкиПодключенияTcp.Видимость			 = Не ТипКоннектораВебСервисы И НаборКонстант.сшпТипИспользуемогоКоннектораESB = Перечисления.сшпТипыКоннекторовESB.Tcp;	
	Элементы.сшпРазмерПакета.Видимость						 = НаборКонстант.сшпРежимПередачиСообщений = Перечисления.сшпРежимыПередачиСообщений.Batch;
	Элементы.сшпДлительностьОжидания.Видимость				 = Не НаборКонстант.сшпАвтоматическийСтартОбработчиков;
	
	Если НаборКонстант.сшпИспользоватьСШП Тогда 
		
		Фз = ФоновыеЗадания.Выполнить("сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазыДляФормыКонстант",, , "ПроверитьЭкземплярИнформационнойБазыДляФормыКонстант");
		Фз.ОжидатьЗавершенияВыполнения();
		
		Если Фз.ПолучитьСообщенияПользователю().Количество() = 1 Тогда 
			
			Элементы.ГруппаРассинхронизацияИдентификаторов.Видимость = Ложь;
		
		Иначе
			
			Элементы.ГруппаРассинхронизацияИдентификаторов.Видимость = Истина;
		
		КонецЕсли;
	
		Рз = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий);
		Элементы.ГруппаУведомлениеОРегламентном.Видимость = Не Рз.Использование;
	
	Иначе
		
		Элементы.ГруппаРассинхронизацияИдентификаторов.Видимость = Ложь;
	
	КонецЕсли;

	Элементы.ОбщаяКомандасшпЗапуститьПотоки.Доступность = сшпФункциональныеОпции.ИспользоватьСШП();

	Элементы.ГруппаАдресаМенеджеровУзлов.Заголовок = "Адреса узлов Datareon (" + Строка(АдресаМенеджеровУзлов.Количество()) + ")";

КонецПроцедуры


&НаСервереБезКонтекста
функция ПроверитьСостояниеЗаданий(Заголовок, ИмяМетода, КоличествоПотоков)
	
	ТекстСостояния = "";
	
	Фз = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяМетода, СостояниеФоновогоЗадания.Активно));
	КоличествоЗапущенных = фз.Количество();
	
	Если КоличествоЗапущенных < КоличествоПотоков Тогда 
		
		ТекстСостояния = Заголовок + Символы.ПС +
		"Запущено потоков: " + фз.Количество() + Символы.ПС + 
		"Должно быть запущено: " + КоличествоПотоков + Символы.ПС;
		
		АварийныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяМетода, СостояниеФоновогоЗадания.ЗавершеноАварийно));
		КоличествоАварийных = АварийныеФЗ.Количество();
		
		Если КоличествоАварийных > 0 Тогда 
			
			КоличествоАварийных = Мин(КоличествоАварийных, КоличествоПотоков - КоличествоЗапущенных);
			ТекстСостояния = ТекстСостояния + 
			"Аварийно завершены задания: " + Символы.ПС;
			
			Для Индекс = 0 по КоличествоАварийных-1 Цикл 
				
				Если АварийныеФЗ[Индекс].ИнформацияОбОшибке = Неопределено Тогда					
					ПодробныйТекстОшибки = "Фоновое задание завершено";					
				Иначе					
					ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(АварийныеФЗ[Индекс].ИнформацияОбОшибке);					
				КонецЕсли;
				
				
				ТекстСостояния = ТекстСостояния + 
				АварийныеФЗ[Индекс].Конец + " "
				+ ПодробныйТекстОшибки + Символы.ПС;	
			
			КонецЦикла;
		
		КонецЕсли;
		
		ТекстСостояния = ТекстСостояния + Символы.ПС;
	
	КонецЕсли;
	
	Возврат ТекстСостояния;

КонецФункции

&НаСервере
Процедура УстновитьТекущееСостояниеПроцессовОбработки() 
	
	Если сшпРаботаСКонстантами.ТипКоннектораВебСервисы() Тогда 
		
		Возврат;
	
	КонецЕсли;

	ТекстСостояния = "";
	
	Если сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда
	
		Рз = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий);
		
		Если Не Рз.Использование Тогда 
			
			ТекстСостояния = "Отключено использование регламентного задания """ + Рз.Наименование + """!" + Символы.ПС;
		
		КонецЕсли;
		
		Фз = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода", Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий.ИмяМетода));
		
		Если Фз.Количество() > 0 Тогда
			
			Сообщения = Фз[0].ПолучитьСообщенияПользователю();
			
			Если Сообщения.Количество()> 0 Или Фз[0].ИнформацияОбОшибке <> Неопределено Тогда 
				
				ТекстСостояния = "Ошибка инициации обмена: " 
					+ ?(Фз[0].ИнформацияОбОшибке = неопределено, "", ПодробноеПредставлениеОшибки(Фз[0].ИнформацияОбОшибке)) + Символы.ПС;
				
				Для Каждого сообщение Из Сообщения Цикл 
					
					ТекстСостояния = ТекстСостояния + сообщение.Текст + Символы.ПС;
				
				КонецЦикла;
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если ТекстСостояния = "" Тогда 
			
			ТекстСостояния = ПроверитьСостояниеЗаданий("Обработка служебных сообщений", "сшпPipe.ПолучениеСлужебныхСообщений", 1);
			ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Получение входящих сообщений", "сшпPipe.ПолучениеТранспортныхСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих")));
			ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Обработка очереди исходящих сообщений", "сшпPipe.ОбработкаОчередиИсходящихСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, 1));
			ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Передача исходящих сообщений", "сшпPipe.ПередачаТранспортныхСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих")));
			ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Получение квитанции по исходящим сообщениям", "сшпPipe.ПолучениеКвитанций", 1);
		
		КонецЕсли;
	
	ИначеЕсли сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB() = Перечисления.сшпТипыКоннекторовESB.Tcp Тогда
	
		Рз = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий);
		
		Если Не Рз.Использование Тогда 
			
			ТекстСостояния = "Отключено использование регламентного задания """ + Рз.Наименование + """!" + Символы.ПС;
		
		КонецЕсли;
		
		Фз = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода", Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий.ИмяМетода));
		
		Если Фз.Количество() > 0 Тогда
			
			Сообщения = Фз[0].ПолучитьСообщенияПользователю();
			
			Если Сообщения.Количество()> 0 Или Фз[0].ИнформацияОбОшибке <> Неопределено Тогда 
				
				ТекстСостояния = "Ошибка инициации обмена: " 
					+ ?(Фз[0].ИнформацияОбОшибке = неопределено, "", ПодробноеПредставлениеОшибки(Фз[0].ИнформацияОбОшибке)) + Символы.ПС;
				
				Для Каждого сообщение Из Сообщения Цикл 
					
					ТекстСостояния = ТекстСостояния + сообщение.Текст + Символы.ПС;
				
				КонецЦикла;
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если ТекстСостояния = "" Тогда 
			
			ТекстСостояния = ПроверитьСостояниеЗаданий("Обработка служебных сообщений", "сшпTcp.ПолучениеСлужебныхСообщений", 1);
			ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Получение входящих сообщений", "сшпTcp.ПолучениеТранспортныхСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих")));
			ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Обработка очереди исходящих сообщений", "сшпTcp.ОбработкаОчередиИсходящихСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, 1));
			ТекстСостояния = ТекстСостояния + ПроверитьСостояниеЗаданий("Передача исходящих сообщений", "сшпTcp.ПередачаТранспортныхСообщений", ?(НаборКонстант.сшпОтключитьПотокиОбработкиДанных, 0, сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих")));
		
		КонецЕсли;		
			
	Иначе
		
		ТекстСостояния = "Не определен тип используемого коннектора!";
		
	КонецЕсли;
		
	Элементы.ДекорацияОшибокНеОбнаружено.Видимость = ТекстСостояния = "";
	Элементы.ОшибкиПриПолученииСообщений.Видимость = ТекстСостояния <> "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИдентификаторИБ(Команда)
	
	ОбновитьИдентификаторИБНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьИдентификаторИБНаСервере()
	
	Фз = ФоновыеЗадания.Выполнить("сшпРаботаСКонстантами.УстановитьИдентификаторИБ",, "УстановитьИдентификаторИБ", "УстановитьИдентификаторИБ");
	Фз.ОжидатьЗавершенияВыполнения();
	
	УправлениеВидимостью();

КонецПроцедуры

&НаКлиенте
Процедура сшпИспользоватьСШППриИзменении(Элемент)
	
	сшпИспользоватьСШППриИзмененииНаСервере();
	ОбновитьИнтерфейс();
	
	Если НаборКонстант.сшпИспользоватьСШП Тогда 
		
		ПодключитьОбработчикОжидания("ОбновитьТекущееСостояниеНаКлиенте", 1, Истина);
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура сшпИспользоватьСШППриИзмененииНаСервере()
	
	КонстантаМенеджер = Константы.сшпИспользоватьСШП;
	КонстантаЗначение = НаборКонстант.сшпИспользоватьСШП;
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		
		КонстантаМенеджер.Установить(КонстантаЗначение);
		
		Если КонстантаЗначение = Истина Тогда 
			
			сшпОбновлениеВерсииКонфигурации.ВыполнитьОбновлениеДанныхКонфигурации();
		
		КонецЕсли;
		
		ОбновитьПовторноИспользуемыеЗначения();
		УправлениеВидимостью();
	
	КонецЕсли;
	
	Если КонстантаЗначение = Истина Тогда 
		
		ТекстСостояния = "";
		сшпОбщегоНазначения.ЗапуститьОбработкуПотоков();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВерсиюИзРежимаСовместимости(РежимСовместимости)
	
	КоличествоСимволовВерсии = Неопределено;
	
	Подстрока = сшпРаботаСоСтроками._СтрНайти(РежимСовместимости, "Версия");
	
	Если Подстрока = 0 Тогда
		 Подстрока = сшпРаботаСоСтроками._СтрНайти(РежимСовместимости, "Version");
		 
		 Если Подстрока = 0 Тогда
			 ВызватьИсключение "Неизвестный режим совместимости";
		 КонецЕсли;
		 
		 КоличествоСимволовВерсии = СтрДлина("Version");
	Иначе
		КоличествоСимволовВерсии = СтрДлина("Версия");
	КонецЕсли;
	
	Версия = Прав(РежимСовместимости, СтрДлина(РежимСовместимости) - КоличествоСимволовВерсии);
	
	Возврат СтрЗаменить(Версия, "_", ".");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СверитьДвеВерсии(ВерсияПриложенияПодсистемы, РежимСовместимости)

	МассивПодстрокВерсииПриложения = сшпРаботаСоСтроками._СтрРазделить(ВерсияПриложенияПодсистемы, ".");
	МассивПодстрокРежимаСовместимости = сшпРаботаСоСтроками._СтрРазделить(РежимСовместимости, ".");
	
	Если МассивПодстрокВерсииПриложения.Количество() <> МассивПодстрокРежимаСовместимости.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Счетчик = 0 По МассивПодстрокВерсииПриложения.Количество() - 1 Цикл
		
		Если МассивПодстрокВерсииПриложения[Счетчик] <> МассивПодстрокРежимаСовместимости[Счетчик] Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СверитьВерсииВДиапазоне(ДиапозонВерсий, РежимСовместимости)

	МассивДиапазонаВерсий = сшпРаботаСоСтроками._СтрРазделить(ДиапозонВерсий, "-");
	
	МассивПодстрокВерсииПриложенияОт = сшпРаботаСоСтроками._СтрРазделить(МассивДиапазонаВерсий[0], ".");
	МассивПодстрокВерсииПриложенияДо = сшпРаботаСоСтроками._СтрРазделить(МассивДиапазонаВерсий[1], ".");
	
	МассивПодстрокРежимаСовместимости = сшпРаботаСоСтроками._СтрРазделить(РежимСовместимости, ".");
	
	
	Если МассивПодстрокВерсииПриложенияОт.Количество() <> МассивПодстрокРежимаСовместимости.Количество() Или 
		МассивПодстрокВерсииПриложенияДо.Количество() <> МассивПодстрокРежимаСовместимости.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Счетчик = 0 По МассивПодстрокРежимаСовместимости.Количество() - 1 Цикл
		
		Если Не ( 
			МассивПодстрокРежимаСовместимости[Счетчик] >=  МассивПодстрокВерсииПриложенияОт[Счетчик]И
			МассивПодстрокРежимаСовместимости[Счетчик] <= МассивПодстрокВерсииПриложенияДо[Счетчик]
		)
		Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СверитьРежимСовместимости(ВерсияПриложенияПодсистемы, РежимСовместимости)
	
	Если ВерсияПриложенияПодсистемы = РежимСовместимости Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если сшпРаботаСоСтроками._СтрНайти(ВерсияПриложенияПодсистемы, ",") Тогда
		
		МассивВерсийДляПроверки = сшпРаботаСоСтроками._СтрРазделить(ВерсияПриложенияПодсистемы, ",");
		
		Для Каждого ВерсияДляПроверки Из МассивВерсийДляПроверки Цикл
			
			Если СверитьДвеВерсии(ВерсияДляПроверки, РежимСовместимости) = Истина Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если сшпРаботаСоСтроками._СтрНайти(ВерсияПриложенияПодсистемы, "-") Тогда
		
		Возврат СверитьВерсииВДиапазоне(ВерсияПриложенияПодсистемы, РежимСовместимости);
		
	КонецЕсли;
	
	Возврат СверитьДвеВерсии(ВерсияПриложенияПодсистемы, РежимСовместимости);
	
КонецФункции

&НаСервере
Процедура ПроверкаВерсииСовместимости() 
	
	ВерсияПриложенияПодсистемы = "8.3.21";
	
	ВерсияПриложенияКонфигурации = "";
	
	Если Строка(Метаданные.РежимСовместимости) <> "НеИспользовать" И
		Строка(Метаданные.РежимСовместимости) <> "DontUse" Тогда
			
		ВерсияПриложенияКонфигурации = ПолучитьВерсиюИзРежимаСовместимости(Метаданные.РежимСовместимости);
		
	Иначе 
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ВерсияПриложенияКонфигурации = сшпРаботаСоСтроками._СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
		Если ВерсияПриложенияКонфигурации.Количество() > 3 Тогда
			
			ВерсияПриложенияКонфигурации = ВерсияПриложенияКонфигурации[0] + "." + ВерсияПриложенияКонфигурации[1] +
				"." + ВерсияПриложенияКонфигурации[2]; 
			
		Иначе
			
			ВерсияПриложенияКонфигурации = СистемнаяИнформация.ВерсияПриложения;
			
		КонецЕсли;                                                             
		
	КонецЕсли;
	
	Если НЕ СверитьРежимСовместимости(ВерсияПриложенияПодсистемы, ВерсияПриложенияКонфигурации) Тогда
		
		ВызватьИсключение "Используемый в конфигурации режим совместимости не соответствует режиму совместимости подсистемы." 
			+ Символы.ПС + "Необходимо установить соответствующую версии совместимости конфигурацию подсистему с сайта с обновлениями." 
			+ Символы.ПС + "Текущая подсистема предназначена для версии совместимости: " + ВерсияПриложенияПодсистемы + "." 
			+ Символы.ПС + "Версия совместимости конфигурации: " + ВерсияПриложенияКонфигурации + "."
			+ Символы.ПС + "Необходимо установить подсистему для версии совместимости: " + ВерсияПриложенияКонфигурации + "."
			+ Символы.ПС + "Сайт с обновлениями: https://esb.datareon.ru/";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	НК = РеквизитФормыВЗначение("НаборКонстант", Тип("КонстантыНабор"));
	НК.Прочитать();
	ЗначениеВРеквизитФормы(нк, "НаборКонстант");
	
	ПрочитатьТаблицуДлительностиХранения();
	ПрочитатьАдресаМенеджеровУзлов();
	УправлениеВидимостью();
	УстновитьТекущееСостояниеПроцессовОбработки();

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура сшпАдресАдаптераESBНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеНажатияАдресАдаптера", ЭтотОбъект);

	НачатьЗапускПриложения(Оповещение, ПолучитьАдресСервисаАдаптера());

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресСервисаАдаптера()
	
	сшпАдресАдаптераESB = сшпФункциональныеОпции.АдресАдаптераESB();
 	типКоннектора = сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB();
	
	Если типКоннектора = Перечисления.сшпТипыКоннекторовESB.REST Тогда
		
		Возврат "http://" + сшпАдресАдаптераESB + сшпФункциональныеОпции.ИмяСервисаESB() + "/sendMessage";
	
	ИначеЕсли типКоннектора = Перечисления.сшпТипыКоннекторовESB.SOAP Тогда
		
		Возврат сшпАдресАдаптераESB + "?singlewsdl";
	
	Иначе
		
		Возврат сшпАдресАдаптераESB;
	
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПослеНажатияАдресАдаптера(ВыбранныйЭлемент, Параметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущееСостояние(Команда)
	
	УстновитьТекущееСостояниеПроцессовОбработки();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущееСостояниеНаКлиенте()
	
	УстновитьТекущееСостояниеПроцессовОбработки();

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПотоки(Команда)
		
	сшпОбщегоНазначения.ЗапуститьОбработкуПотоков();
	ПодключитьОбработчикОжидания("ОбновитьТекущееСостояниеНаКлиенте", 1, Истина);

	ПодключитьОбработчикОжидания("ОжиданиеЗавершенияЗаданияНаКлиенте", 1, Истина);

КонецПроцедуры

#Область ОбработкаДанныхЗапуска
&НаКлиенте
Процедура ОжиданиеЗавершенияЗаданияНаКлиенте()
	
	ОжиданиеЗавершенияЗаданияНаСервере();			
	
КонецПроцедуры

&НаСервере
Процедура ОжиданиеЗавершенияЗаданияНаСервере()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.сшпЗапускОбработкиЗаданий.ИмяМетода);
	СтруктураОтбора.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
	Если АктивныеЗадания.Количество()>0 Тогда
		
		ВывестиСообщениеПользователюНаСервере("Запущена проверка подключений по протоколам TCP и PIPE...");
		АктивныеЗадания[0].ОжидатьЗавершенияВыполнения();
		ВывестиСообщениеПользователюНаСервере("Проверка подключений завершена");
						
	КонецЕсли;
	
	типКоннектора = сшпФункциональныеОпции.ТипИспользуемогоКоннектораESB();
	
	Если типКоннектора = Перечисления.сшпТипыКоннекторовESB.REST ИЛИ
		типКоннектора = Перечисления.сшпТипыКоннекторовESB.SOAP Тогда
		
		ВывестиСообщениеПользователюНаСервере("Запущены процессы обработки сообщений");
		
	ИначеЕсли типКоннектора = Перечисления.сшпТипыКоннекторовESB.ПустаяСсылка() Тогда
		
		ВывестиСообщениеПользователюНаСервере("Не удалось получить параметры подключения к адаптеру, проверьте параметры подключения на адаптере");
		
	ИначеЕсли (типКоннектора = Перечисления.сшпТипыКоннекторовESB.Tcp ИЛИ 
		типКоннектора = Перечисления.сшпТипыКоннекторовESB.Pipe) И 
		сшпФункциональныеОпции.ОтключитьСоединение() Тогда
		
		ВывестиСообщениеПользователюНаСервере("Подключение к адаптеру не доступно");	
		
	ИначеЕсли типКоннектора = Перечисления.сшпТипыКоннекторовESB.Tcp Тогда
		
		ВывестиСообщениеПользователюНаСервере("Инициализация TCP завершена успешно");
		
		КоличествоЗаданийЗапущено = ПолучитьКоличествоФоновыхЗаданийНаСервере("сшпTcp");
		МаксимумПотоковВходящих = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих");
		МаксимумПотоковИсходящих = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих");		
		КоличествоПотоковНорма = МаксимумПотоковВходящих + МаксимумПотоковИсходящих + 3;
		
		Если КоличествоЗаданийЗапущено < КоличествоПотоковНорма Тогда
			
			ВывестиСообщениеПользователюНаСервере("Не запущено " + Строка(КоличествоПотоковНорма-КоличествоЗаданийЗапущено) + " заданий, проверьте состояние позже, задания запустятся автоматически");
			
		КонецЕсли;
		
	ИначеЕсли типКоннектора = Перечисления.сшпТипыКоннекторовESB.Pipe Тогда
		
		ВывестиСообщениеПользователюНаСервере("Инициализация Pipe завершена успешно");
		
		КоличествоЗаданийЗапущено = ПолучитьКоличествоФоновыхЗаданийНаСервере("сшпPipe");
		МаксимумПотоковВходящих = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих");
		МаксимумПотоковИсходящих = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиИсходящих");		
		КоличествоПотоковНорма = МаксимумПотоковВходящих + МаксимумПотоковИсходящих + 3;
		
		Если КоличествоЗаданийЗапущено < КоличествоПотоковНорма Тогда
			
			ВывестиСообщениеПользователюНаСервере("Не запущено " + Строка(КоличествоПотоковНорма-КоличествоЗаданийЗапущено) + " заданий, проверьте состояние позже, задания запустятся автоматически");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоФоновыхЗаданийНаСервере(ИмяМодуля)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	МассивРезультатов = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
	
	Счетчик = 0;
	
	Для Сч = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Если Найти(МассивРезультатов[Сч].Наименование, ИмяМодуля + ".") > 0 Тогда
							
			Счетчик = Счетчик + 1;	
							
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Счетчик;
	
КонецФункции
#КонецОбласти

&НаСервере
Процедура ВывестиСообщениеПользователюНаСервере(Текст)
	
	сообщ = Новый СообщениеПользователю;
	сообщ.Текст = Строка(ТекущаяДата()) + ": " + Текст;
	сообщ.Сообщить();
	
КонецПроцедуры

#КонецОбласти